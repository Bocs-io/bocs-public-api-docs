get:
  operationId: GetBocs
  summary: Get Bocs
  description: Returns details about a bocs
  tags:
    - Bocs
  parameters:
    - name: id
      in: path
      schema:
        type: string
        example: 20f4d56d-2b58-430b-8d51-93d2b6a53d59
      required: true
      description: ID of the bocs
  security:
    - api_key: []
  x-codeSamples:
    - label: "CLI"
      lang: "cURL"
      source: |
        curl --request GET \
        --header 'Authorization: <your API Key>' \
        --header 'Content-Type: application/json' \
        --url 'https://api.bocs.io/test/bocs/<bocs ID>' \
        | jq
  responses:
    "200":
      description: Success
      content:
        application/json:
          schema:
            $ref: ../../components/responses/bocs/BocsGetResponse.yaml
    "401":
      $ref: ../../components/responses/401.yaml
    "403":
      $ref: ../../components/responses/403.yaml
    "404":
      $ref: ../../components/responses/404.yaml
    "500":
      $ref: ../../components/responses/500.yaml

put:
  operationId: PutBocs
  summary: Update Bocs
  description: Update properties of a bocs
  tags:
    - Bocs
  parameters:
    - name: id
      in: path
      schema:
        type: string
        example: 20f4d56d-2b58-430b-8d51-93d2b6a53d59
      required: true
      description: ID of the bocs
  security:
    - api_key: []
  x-codeSamples:
    - label: "CLI"
      lang: "cURL"
      source: |
        curl --request PUT \
        --header 'Authorization: <your API Key>' \
        --header 'Content-Type: application/json' \
        --url 'https://api.bocs.io/test/bocs/<bocs ID>' \
        --data '' \
        | jq
  requestBody:
    description: Parameters for creating a bocs
    required: true
    content:
      application/json:
        schema:
          $ref: ../../components/schemas/bocs/BocsPutRequest.yaml
  responses:
    "200":
      description: Success
      content:
        application/json:
          schema:
            $ref: ../../components/responses/bocs/BocsPutResponse.yaml
    "400":
      $ref: ../../components/responses/400.yaml
    "401":
      $ref: ../../components/responses/401.yaml
    "403":
      $ref: ../../components/responses/403.yaml
    "404":
      $ref: ../../components/responses/404.yaml
    "500":
      $ref: ../../components/responses/500.yaml

delete:
  operationId: DeleteBocs
  summary: Delete Bocs
  description: Deletes a specified bocs
  tags:
    - Bocs
  parameters:
    - name: id
      in: path
      schema:
        type: string
        example: 20f4d56d-2b58-430b-8d51-93d2b6a53d59
      required: true
      description: ID of the bocs
  security:
    - api_key: []
  x-codeSamples:
    - label: "CLI"
      lang: "cURL"
      source: |
        curl --request DELETE \
        --header 'Authorization: <your API Key>' \
        --header 'Content-Type: application/json' \
        --url 'https://api.bocs.io/test/bocs/<bocs ID>' \
        | jq
  responses:
    "200":
      description: Success
      content:
        application/json:
          schema:
            $ref: ../../components/responses/bocs/BocsDeleteResponse.yaml
    "400":
      $ref: ../../components/responses/400.yaml
    "401":
      $ref: ../../components/responses/401.yaml
    "403":
      $ref: ../../components/responses/403.yaml
    "404":
      $ref: ../../components/responses/404.yaml
    "500":
      $ref: ../../components/responses/500.yaml
