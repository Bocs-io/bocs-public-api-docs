{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Bocs API",
    "description" : "This is an **example** API to demonstrate features of the OpenAPI specification.\n\n# Introduction\n\nThis API definition is intended to to be a good starting point for\ndescribing your API in \n\n[OpenAPI/Swagger\nformat](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).\n\nIt also demonstrates features of the\n[create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool\nand \n\nthe [Redoc](https://github.com/Redocly/Redoc) documentation engine. Beyond\nthe standard OpenAPI syntax, we use a few \n\n[vendor\nextensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n\n# OpenAPI Specification\n\nThe goal of The OpenAPI Specification is to define a standard,\nlanguage-agnostic interface to REST APIs which\n\nallows both humans and computers to discover and understand the capabilities\nof the service without access to source\n\ncode, documentation, or through network traffic inspection. When properly\ndefined via OpenAPI, a consumer can \n\nunderstand and interact with the remote service with a minimal amount of\nimplementation logic. Similar to what\n\ninterfaces have done for lower-level programming, OpenAPI removes the\nguesswork in calling the service.\n",
    "termsOfService" : "https://api.bocs.io/terms/",
    "contact" : {
      "url" : "https://bocs.io/contact",
      "email" : "contact@bocs.io"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "1.0.0",
    "x-logo" : {
      "url" : "https://git.bocs.io/bocs.png"
    }
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/MyPik-App/bocs/1.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://api.bocs.io/test",
    "description" : "Test server"
  } ],
  "paths" : {
    "/contacts" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "List Contacts",
        "description" : "Returns a list of contacts",
        "operationId" : "ListContacts",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/contacts' | jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Create Contact",
        "description" : "Creates a contact",
        "operationId" : "PostContact",
        "requestBody" : {
          "description" : "Contact Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactsPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/contacts' \\\n--data '{\"email\": \"foo@example.com\", \"firstName\": \"Foo\", \"lastName\": \"Bar\"}' \\\n| jq\n"
        } ]
      }
    },
    "/contacts/{id}" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Get Contact",
        "description" : "Returns a contact",
        "operationId" : "GetContact",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the contact",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/contacts/<contact ID>' | jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Contacts" ],
        "summary" : "Update Contact",
        "description" : "Updates a contact",
        "operationId" : "PutContact",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the contact",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Contact Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactsPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/contacts/<contact ID>' \\\n--data '{\"lastName\": \"updated\"}' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Contacts" ],
        "summary" : "Delete Contact",
        "description" : "Deletes a contact",
        "operationId" : "DeleteContact",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the contact",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/contacts/<contact ID>' | jq\n"
        } ]
      }
    },
    "/orders" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "List Orders",
        "description" : "List of orders",
        "operationId" : "ListOrders",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrdersListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/orders' | jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Create Order",
        "description" : "Creates an order",
        "operationId" : "PostOrder",
        "requestBody" : {
          "description" : "Order Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrdersPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrdersPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/orders' \\\n--data '{\"email\": \"foo@example.com\", \"firstName\": \"Foo\", \"lastName\": \"Bar\"}' \\\n| jq\n"
        } ]
      }
    },
    "/orders/{id}" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "Get Order",
        "description" : "Returns an order",
        "operationId" : "GetOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the order",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrdersGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/orders/<order ID>' | jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Orders" ],
        "summary" : "Update Order",
        "description" : "Updates an order",
        "operationId" : "PutOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the order",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Order Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrdersPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrdersPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/orders/<order ID>' \\\n--data '{\"lastName\": \"updated\"}' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Orders" ],
        "summary" : "Delete Order",
        "description" : "Deletes an order",
        "operationId" : "DeleteOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the order",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrdersDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/orders/<order ID>' | jq\n"
        } ]
      }
    },
    "/products" : {
      "get" : {
        "tags" : [ "Products" ],
        "summary" : "List Products",
        "description" : "List of products",
        "operationId" : "ListProducts",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductsListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/products' | jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Products" ],
        "summary" : "Create Product",
        "description" : "Creates a product",
        "operationId" : "PostProduct",
        "requestBody" : {
          "description" : "Product Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductsPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductsPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/products' \\\n--data '{\"email\": \"foo@example.com\", \"firstName\": \"Foo\", \"lastName\": \"Bar\"}' \\\n| jq\n"
        } ]
      }
    },
    "/products/{id}" : {
      "get" : {
        "tags" : [ "Products" ],
        "summary" : "Get Product",
        "description" : "Returns a product",
        "operationId" : "GetProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the product",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductsGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/products/<product ID>' | jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Products" ],
        "summary" : "Update Product",
        "description" : "Updates a product",
        "operationId" : "PutProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the product",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Product Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductsPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductsPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/products/<product ID>' \\\n--data '{\"lastName\": \"updated\"}' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Products" ],
        "summary" : "Delete Product",
        "description" : "Deletes a product",
        "operationId" : "DeleteProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the product",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductsDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/products/<product ID>' | jq\n"
        } ]
      }
    },
    "/subscriptions" : {
      "get" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "List Subscriptions",
        "description" : "List of subscriptions",
        "operationId" : "ListSubscriptions",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscriptions' | jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "Create Subscription",
        "description" : "Creates a subscription",
        "operationId" : "PostSubscription",
        "requestBody" : {
          "description" : "Subscription Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionsPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscriptions' \\\n--data '{\"email\": \"foo@example.com\", \"firstName\": \"Foo\", \"lastName\": \"Bar\"}' \\\n| jq\n"
        } ]
      }
    },
    "/subscriptions/{id}" : {
      "get" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "Get Subscription",
        "description" : "Returns a subscription",
        "operationId" : "GetSubscription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the subscription",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscriptions/<subscription ID>' | jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "Update Subscription",
        "description" : "Updates a subscription",
        "operationId" : "PutSubscription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the subscription",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Subscription Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionsPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscriptions/<subscription ID>' \\\n--data '{\"lastName\": \"updated\"}' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "Delete Subscription",
        "description" : "Deletes a subscription",
        "operationId" : "DeleteSubscription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the subscription",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscriptions/<subscription ID>' | jq\n"
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "ContactsListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContactsListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "Error" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "ContactsPostRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "ContactsPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ContactsListResponse_data"
          }
        }
      },
      "ContactsGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ContactsListResponse_data"
          }
        }
      },
      "ContactsPutRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "ContactsPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ContactsListResponse_data"
          }
        }
      },
      "ContactsDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "OrdersListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrdersListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "OrdersPostRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "OrdersPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/OrdersPostResponse_data"
          }
        }
      },
      "OrdersGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ContactsListResponse_data"
          }
        }
      },
      "OrdersPutRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "OrdersPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ContactsListResponse_data"
          }
        }
      },
      "OrdersDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "ProductsListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContactsListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "ProductsPostRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "ProductsPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ContactsListResponse_data"
          }
        }
      },
      "ProductsGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ContactsListResponse_data"
          }
        }
      },
      "ProductsPutRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "ProductsPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ContactsListResponse_data"
          }
        }
      },
      "ProductsDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "SubscriptionsListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContactsListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "SubscriptionsPostRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "SubscriptionsPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ContactsListResponse_data"
          }
        }
      },
      "SubscriptionsGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ContactsListResponse_data"
          }
        }
      },
      "SubscriptionsPutRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "SubscriptionsPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ContactsListResponse_data"
          }
        }
      },
      "SubscriptionsDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "ContactsListResponse_data" : {
        "type" : "object",
        "properties" : {
          "contactId" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          },
          "createdAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "OrdersListResponse_customer" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          },
          "email" : {
            "type" : "string",
            "example" : "foo@example.com"
          }
        }
      },
      "OrdersListResponse_refunds" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "reason" : {
            "type" : "string",
            "example" : "Foo Bar"
          },
          "total" : {
            "type" : "number",
            "example" : 100
          },
          "createdAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "OrdersListResponse_data" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "orderId" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "isSubscription" : {
            "type" : "boolean",
            "example" : false
          },
          "total" : {
            "type" : "number",
            "example" : 100
          },
          "discount" : {
            "type" : "number",
            "example" : 3
          },
          "shippingRate" : {
            "type" : "number",
            "example" : 2
          },
          "currency" : {
            "type" : "string",
            "example" : "AUD"
          },
          "status" : {
            "type" : "string",
            "example" : "active"
          },
          "paymentDate" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "isPaid" : {
            "type" : "boolean",
            "example" : false
          },
          "platform" : {
            "type" : "string",
            "example" : "woocommerce"
          },
          "customer" : {
            "$ref" : "#/components/schemas/OrdersListResponse_customer"
          },
          "refunds" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrdersListResponse_refunds"
            }
          },
          "createdAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "OrdersPostResponse_data" : {
        "type" : "object",
        "properties" : {
          "total" : {
            "type" : "string"
          },
          "discount" : {
            "type" : "number"
          },
          "shippingRate" : {
            "type" : "number"
          },
          "currency" : {
            "type" : "string",
            "example" : "Bar"
          },
          "status" : {
            "type" : "string"
          },
          "paymentDate" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      }
    },
    "responses" : {
      "400" : {
        "description" : "Bad request",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 400,
              "message" : "Field is required"
            }
          }
        }
      },
      "401" : {
        "description" : "Unauthorized",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 401,
              "message" : "Unauthorized"
            }
          }
        }
      },
      "403" : {
        "description" : "Forbidden",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 403,
              "message" : "Forbidden"
            }
          }
        }
      },
      "404" : {
        "description" : "Not found",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 404,
              "message" : "Not found"
            }
          }
        }
      },
      "500" : {
        "description" : "Internal server error",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 500,
              "message" : "Internal server error"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "api_key" : {
        "type" : "apiKey",
        "name" : "api_key",
        "in" : "header"
      },
      "basic_auth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  },
  "x-tagGroups" : [ {
    "name" : "People",
    "tags" : [ "Contacts" ]
  }, {
    "name" : "Products",
    "tags" : [ "Products" ]
  }, {
    "name" : "Sales",
    "tags" : [ "Orders", "Subscriptions" ]
  } ]
}