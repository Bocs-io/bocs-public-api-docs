{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Bocs API",
    "description" : "This is an **example** API to demonstrate features of the OpenAPI specification.\n\n# Introduction\n\nThis API definition is intended to to be a good starting point for\ndescribing your API in \n\n[OpenAPI/Swagger\nformat](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).\n\nIt also demonstrates features of the\n[create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool\nand \n\nthe [Redoc](https://github.com/Redocly/Redoc) documentation engine. Beyond\nthe standard OpenAPI syntax, we use a few \n\n[vendor\nextensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n\n# OpenAPI Specification\n\nThe goal of The OpenAPI Specification is to define a standard,\nlanguage-agnostic interface to REST APIs which\n\nallows both humans and computers to discover and understand the capabilities\nof the service without access to source\n\ncode, documentation, or through network traffic inspection. When properly\ndefined via OpenAPI, a consumer can \n\nunderstand and interact with the remote service with a minimal amount of\nimplementation logic. Similar to what\n\ninterfaces have done for lower-level programming, OpenAPI removes the\nguesswork in calling the service.\n",
    "termsOfService" : "https://api.bocs.io/terms/",
    "contact" : {
      "url" : "https://bocs.io/contact",
      "email" : "contact@bocs.io"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "1.0.0",
    "x-logo" : {
      "url" : "https://git.bocs.io/bocs.png"
    }
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/MyPik-App/bocs/1.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://api.bocs.io/test",
    "description" : "Test server"
  } ],
  "paths" : {
    "/contacts" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "List Contacts",
        "description" : "Returns a list of contacts",
        "operationId" : "ListContacts",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/contacts' \\\n| jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Create Contact",
        "description" : "Create properties of a contact",
        "operationId" : "PostContact",
        "requestBody" : {
          "description" : "Parameters for creating a contact",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactsPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/contacts' \\\n--data '{\"email\": \"foo@example.com\", \"firstName\": \"Foo\", \"lastName\": \"Bar\"}' \\\n| jq\n"
        } ]
      }
    },
    "/contacts/{id}" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Get Contact",
        "description" : "Returns details about a contact",
        "operationId" : "GetContact",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the contact",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/contacts/<contact ID>' \\\n| jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Contacts" ],
        "summary" : "Update Contact",
        "description" : "Update properties for a contact",
        "operationId" : "PutContact",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the contact",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for updating a contact",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactsPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/contacts/<contact ID>' \\\n--data '{\"lastName\": \"updated\"}' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Contacts" ],
        "summary" : "Delete Contact",
        "description" : "Deletes a specified contact",
        "operationId" : "DeleteContact",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the contact",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/contacts/<contact ID>' \\\n| jq\n"
        } ]
      }
    },
    "/subscribers" : {
      "get" : {
        "tags" : [ "Subscribers" ],
        "summary" : "List Subscribers",
        "description" : "Returns a list of subscribers",
        "operationId" : "ListSubscribers",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscribersListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscribers' \\\n| jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Subscribers" ],
        "summary" : "Create Subscriber",
        "description" : "Create properties of a subscriber",
        "operationId" : "PostSubscriber",
        "requestBody" : {
          "description" : "Parameters for creating a subscriber",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscribersPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscribersPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscribers' \\\n--data '{\"email\": \"foo@example.com\", \"firstName\": \"Foo\", \"lastName\": \"Bar\"}' \\\n| jq\n"
        } ]
      }
    },
    "/subscribers/{id}" : {
      "get" : {
        "tags" : [ "Subscribers" ],
        "summary" : "Get Subscriber",
        "description" : "Returns details about a subscriber",
        "operationId" : "GetSubscriber",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the subscriber",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscribersGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscribers/<subscriber ID>' \\\n| jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Subscribers" ],
        "summary" : "Update Subscriber",
        "description" : "Update details of a subscriber",
        "operationId" : "PutSubscriber",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the subscriber",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for updating a subscriber",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscribersPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscribersPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscribers/<subscriber ID>' \\\n--data '{\"lastName\": \"updated\"}' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Subscribers" ],
        "summary" : "Delete Subscriber",
        "description" : "Deletes a specified subscriber",
        "operationId" : "DeleteSubscriber",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the subscriber",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscribersDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscribers/<subscriber ID>' \\\n| jq\n"
        } ]
      }
    },
    "/address" : {
      "get" : {
        "tags" : [ "Address" ],
        "summary" : "List Address",
        "description" : "List of address",
        "operationId" : "ListAddress",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/address' | jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Address" ],
        "summary" : "Create Address",
        "description" : "Creates a address",
        "operationId" : "PostAddress",
        "requestBody" : {
          "description" : "Address Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddressPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/address' \\\n--data '{\"email\": \"foo@example.com\", \"firstName\": \"Foo\", \"lastName\": \"Bar\"}' \\\n| jq\n"
        } ]
      }
    },
    "/address/{id}" : {
      "get" : {
        "tags" : [ "Address" ],
        "summary" : "Get Address",
        "description" : "Returns a address",
        "operationId" : "GetAddress",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/address/<address ID>' | jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Address" ],
        "summary" : "Update Address",
        "description" : "Updates a address",
        "operationId" : "PutAddress",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Address Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddressPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/address/<address ID>' \\\n--data '{\"lastName\": \"updated\"}' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Address" ],
        "summary" : "Delete Address",
        "description" : "Deletes a address",
        "operationId" : "DeleteAddress",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/address/<address ID>' | jq\n"
        } ]
      }
    },
    "/collections" : {
      "get" : {
        "tags" : [ "Collections" ],
        "summary" : "List Collections",
        "description" : "List of collections",
        "operationId" : "ListCollections",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionsListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/collections' | jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Collections" ],
        "summary" : "Create Collection",
        "description" : "Creates a collection",
        "operationId" : "PostCollection",
        "requestBody" : {
          "description" : "Collection Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CollectionsPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionsPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/collections' \\\n--data '{\"email\": \"foo@example.com\", \"firstName\": \"Foo\", \"lastName\": \"Bar\"}' \\\n| jq\n"
        } ]
      }
    },
    "/collections/{id}" : {
      "get" : {
        "tags" : [ "Collections" ],
        "summary" : "Get Collection",
        "description" : "Returns a collection",
        "operationId" : "GetCollection",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the collection",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionsGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/collections/<collection ID>' | jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Collections" ],
        "summary" : "Update Collection",
        "description" : "Updates a collection",
        "operationId" : "PutCollection",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the collection",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Collection Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CollectionsPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionsPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/collections/<collection ID>' \\\n--data '{\"lastName\": \"updated\"}' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Collections" ],
        "summary" : "Delete Collection",
        "description" : "Deletes a collection",
        "operationId" : "DeleteCollection",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the collection",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionsDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/collections/<collection ID>' | jq\n"
        } ]
      }
    },
    "/bocs" : {
      "get" : {
        "tags" : [ "Bocs" ],
        "summary" : "List Bocs",
        "description" : "List of bocs",
        "operationId" : "ListBocs",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BocsListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/bocs' | jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Bocs" ],
        "summary" : "Create Bocs",
        "description" : "Creates a bocs",
        "operationId" : "PostBocs",
        "requestBody" : {
          "description" : "Bocs Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BocsPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BocsPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/bocs' \\\n--data '{\"email\": \"foo@example.com\", \"firstName\": \"Foo\", \"lastName\": \"Bar\"}' \\\n| jq\n"
        } ]
      }
    },
    "/bocs/{id}" : {
      "get" : {
        "tags" : [ "Bocs" ],
        "summary" : "Get Bocs",
        "description" : "Returns a bocs",
        "operationId" : "GetBocs",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the bocs",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BocsGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/bocs/<bocs ID>' | jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Bocs" ],
        "summary" : "Update Bocs",
        "description" : "Updates a bocs",
        "operationId" : "PutBocs",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the bocs",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Bocs Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BocsPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BocsPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/bocs/<bocs ID>' \\\n--data '{\"lastName\": \"updated\"}' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Bocs" ],
        "summary" : "Delete Bocs",
        "description" : "Deletes a bocs",
        "operationId" : "DeleteBocs",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the bocs",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BocsDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/bocs/<bocs ID>' | jq\n"
        } ]
      }
    },
    "/products" : {
      "get" : {
        "tags" : [ "Products" ],
        "summary" : "List Products",
        "description" : "List of products",
        "operationId" : "ListProducts",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductsListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/products' | jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Products" ],
        "summary" : "Create Product",
        "description" : "Creates a product",
        "operationId" : "PostProduct",
        "requestBody" : {
          "description" : "Product Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductsPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductsPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/products' \\\n--data '{\"email\": \"foo@example.com\", \"firstName\": \"Foo\", \"lastName\": \"Bar\"}' \\\n| jq\n"
        } ]
      }
    },
    "/products/{id}" : {
      "get" : {
        "tags" : [ "Products" ],
        "summary" : "Get Product",
        "description" : "Returns a product",
        "operationId" : "GetProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the product",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductsGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/products/<product ID>' | jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Products" ],
        "summary" : "Update Product",
        "description" : "Updates a product",
        "operationId" : "PutProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the product",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Product Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductsPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductsPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/products/<product ID>' \\\n--data '{\"lastName\": \"updated\"}' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Products" ],
        "summary" : "Delete Product",
        "description" : "Deletes a product",
        "operationId" : "DeleteProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the product",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductsDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/products/<product ID>' | jq\n"
        } ]
      }
    },
    "/categories" : {
      "get" : {
        "tags" : [ "Categories" ],
        "summary" : "List Categories",
        "description" : "List of categories",
        "operationId" : "ListCategories",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CategoriesListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/categories' | jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Categories" ],
        "summary" : "Create Category",
        "description" : "Creates a category",
        "operationId" : "PostCategory",
        "requestBody" : {
          "description" : "Category Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CategoriesPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CategoriesPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/categories' \\\n--data '{\"email\": \"foo@example.com\", \"firstName\": \"Foo\", \"lastName\": \"Bar\"}' \\\n| jq\n"
        } ]
      }
    },
    "/categories/{id}" : {
      "get" : {
        "tags" : [ "Categories" ],
        "summary" : "Get Category",
        "description" : "Returns a category",
        "operationId" : "GetCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the category",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CategoriesGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/categories/<category ID>' | jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Categories" ],
        "summary" : "Update Category",
        "description" : "Updates a category",
        "operationId" : "PutCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the category",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Category Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CategoriesPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CategoriesPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/categories/<category ID>' \\\n--data '{\"lastName\": \"updated\"}' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Categories" ],
        "summary" : "Delete Category",
        "description" : "Deletes a category",
        "operationId" : "DeleteCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the category",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CategoriesDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/categories/<category ID>' | jq\n"
        } ]
      }
    },
    "/tags" : {
      "get" : {
        "tags" : [ "Tags" ],
        "summary" : "List Tags",
        "description" : "List of tags",
        "operationId" : "ListTags",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagsListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tags' | jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Tags" ],
        "summary" : "Create Tag",
        "description" : "Creates a tag",
        "operationId" : "PostTag",
        "requestBody" : {
          "description" : "Tag Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TagsPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagsPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tags' \\\n--data '{\"email\": \"foo@example.com\", \"firstName\": \"Foo\", \"lastName\": \"Bar\"}' \\\n| jq\n"
        } ]
      }
    },
    "/tags/{id}" : {
      "get" : {
        "tags" : [ "Tags" ],
        "summary" : "Get Tag",
        "description" : "Returns a tag",
        "operationId" : "GetTag",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagsGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tags/<tag ID>' | jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Tags" ],
        "summary" : "Update Tag",
        "description" : "Updates a tag",
        "operationId" : "PutTag",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Tag Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TagsPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagsPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tags/<tag ID>' \\\n--data '{\"lastName\": \"updated\"}' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Tags" ],
        "summary" : "Delete Tag",
        "description" : "Deletes a tag",
        "operationId" : "DeleteTag",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagsDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tags/<tag ID>' | jq\n"
        } ]
      }
    },
    "/orders" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "List Orders",
        "description" : "List of orders",
        "operationId" : "ListOrders",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrdersListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/orders' | jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Create Order",
        "description" : "Creates an order",
        "operationId" : "PostOrder",
        "requestBody" : {
          "description" : "Order Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrdersPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrdersPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/orders' \\\n--data '{\"email\": \"foo@example.com\", \"firstName\": \"Foo\", \"lastName\": \"Bar\"}' \\\n| jq\n"
        } ]
      }
    },
    "/orders/{id}" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "Get Order",
        "description" : "Returns an order",
        "operationId" : "GetOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the order",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrdersGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/orders/<order ID>' | jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Orders" ],
        "summary" : "Update Order",
        "description" : "Updates an order",
        "operationId" : "PutOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the order",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Order Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrdersPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrdersPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/orders/<order ID>' \\\n--data '{\"lastName\": \"updated\"}' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Orders" ],
        "summary" : "Delete Order",
        "description" : "Deletes an order",
        "operationId" : "DeleteOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the order",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrdersDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/orders/<order ID>' | jq\n"
        } ]
      }
    },
    "/subscriptions" : {
      "get" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "List Subscriptions",
        "description" : "List of subscriptions",
        "operationId" : "ListSubscriptions",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscriptions' | jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "Create Subscription",
        "description" : "Creates a subscription",
        "operationId" : "PostSubscription",
        "requestBody" : {
          "description" : "Subscription Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionsPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscriptions' \\\n--data '{\"email\": \"foo@example.com\", \"firstName\": \"Foo\", \"lastName\": \"Bar\"}' \\\n| jq\n"
        } ]
      }
    },
    "/subscriptions/{id}" : {
      "get" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "Get Subscription",
        "description" : "Returns a subscription",
        "operationId" : "GetSubscription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the subscription",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscriptions/<subscription ID>' | jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "Update Subscription",
        "description" : "Updates a subscription",
        "operationId" : "PutSubscription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the subscription",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Subscription Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionsPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscriptions/<subscription ID>' \\\n--data '{\"lastName\": \"updated\"}' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "Delete Subscription",
        "description" : "Deletes a subscription",
        "operationId" : "DeleteSubscription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the subscription",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscriptions/<subscription ID>' | jq\n"
        } ]
      }
    },
    "/shipping-zones" : {
      "get" : {
        "tags" : [ "Shipping Zones" ],
        "summary" : "List Shipping Zones",
        "description" : "List of shipping zones",
        "operationId" : "ListShippingZones",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ShippingZonesListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/shipping-zones' | jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Shipping Zones" ],
        "summary" : "CreateShipping Zone",
        "description" : "Creates a shipping zone",
        "operationId" : "PostShippingZone",
        "requestBody" : {
          "description" : "Shipping Zone Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ShippingZonesPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ShippingZonesPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/shipping-zones' \\\n--data '{\"email\": \"foo@example.com\", \"firstName\": \"Foo\", \"lastName\": \"Bar\"}' \\\n| jq\n"
        } ]
      }
    },
    "/shipping-zones/{id}" : {
      "get" : {
        "tags" : [ "Shipping Zones" ],
        "summary" : "Get Shipping Zone",
        "description" : "Returns a shipping zone",
        "operationId" : "GetShippingZone",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the shipping zone",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ShippingZonesGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/shipping-zones/<shipping zone ID>' | jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Shipping Zones" ],
        "summary" : "Update Shipping Zone",
        "description" : "Updates a shipping zone",
        "operationId" : "PutShippingZone",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the shipping zone",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Shipping Zone Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ShippingZonesPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ShippingZonesPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/shipping-zones/<shipping zone ID>' \\\n--data '{\"lastName\": \"updated\"}' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Shipping Zones" ],
        "summary" : "Delete Shipping Zone",
        "description" : "Deletes a shipping zone",
        "operationId" : "DeleteShippingZone",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the shipping zone",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ShippingZonesDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/shipping-zones/<shipping zone ID>' | jq\n"
        } ]
      }
    },
    "/tax-rates" : {
      "get" : {
        "tags" : [ "Tax Rates" ],
        "summary" : "List Tax Rates",
        "description" : "List of tax rates",
        "operationId" : "ListTaxRates",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxRatesListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tax-rates' | jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Tax Rates" ],
        "summary" : "Create Tax Rate",
        "description" : "Creates a tax rate",
        "operationId" : "PostTaxRate",
        "requestBody" : {
          "description" : "Tax Rate Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxRatesPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxRatesPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tax-rates' \\\n--data '{\"email\": \"foo@example.com\", \"firstName\": \"Foo\", \"lastName\": \"Bar\"}' \\\n| jq\n"
        } ]
      }
    },
    "/tax-rates/{id}" : {
      "get" : {
        "tags" : [ "Tax Rates" ],
        "summary" : "Get Tax Rate",
        "description" : "Returns a tax rate",
        "operationId" : "GetTaxRate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the tax rate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxRatesGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tax-rates/<subscription ID>' | jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Tax Rates" ],
        "summary" : "Update Tax Rate",
        "description" : "Updates a tax rate",
        "operationId" : "PutTaxRate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the tax rate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Tax Rate Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxRatesPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxRatesPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tax-rates/<subscription ID>' \\\n--data '{\"lastName\": \"updated\"}' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Tax Rates" ],
        "summary" : "Delete Tax Rate",
        "description" : "Deletes a tax rate",
        "operationId" : "DeleteTaxRate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the tax rate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxRatesDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tax-rates/<subscription ID>' | jq\n"
        } ]
      }
    },
    "/widgets" : {
      "get" : {
        "tags" : [ "Widgets" ],
        "summary" : "List Widgets",
        "description" : "List of widgets",
        "operationId" : "ListWidgets",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WidgetsListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/widgets' | jq\n"
        } ]
      }
    },
    "/widgets/{id}" : {
      "get" : {
        "tags" : [ "Widgets" ],
        "summary" : "Get Widget",
        "description" : "Returns a widget",
        "operationId" : "GetWidget",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the widget",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WidgetsGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/widgets/<widget ID>' | jq\n"
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "ContactsListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContactsListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "Error" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "ContactsPostRequest" : {
        "required" : [ "email" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Email of the contact",
            "example" : "earl+irwin@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of the contact",
            "example" : "Earl"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of the contact",
            "example" : "Irwin"
          }
        }
      },
      "ContactsPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ContactsListResponse_data"
          }
        }
      },
      "ContactsGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ContactsListResponse_data"
          }
        }
      },
      "ContactsPutRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Email of the contact",
            "example" : "earl+irwin@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of the contact",
            "example" : "Earl"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of the contact",
            "example" : "Irwin"
          }
        }
      },
      "ContactsPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ContactsListResponse_data"
          }
        }
      },
      "ContactsDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "SubscribersListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscribersListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "SubscribersPostRequest" : {
        "required" : [ "company", "email" ],
        "type" : "object",
        "properties" : {
          "company" : {
            "type" : "string",
            "example" : "Qualia Wine Services"
          },
          "email" : {
            "type" : "string",
            "example" : "ear+irwin@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Earl"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Irwin"
          },
          "gender" : {
            "type" : "string",
            "example" : "male",
            "enum" : [ "male", "female" ]
          },
          "phone" : {
            "type" : "string",
            "example" : "619125324436"
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/SubscribersListResponse_billingAddress"
          },
          "shippingAddress" : {
            "$ref" : "#/components/schemas/SubscribersListResponse_billingAddress"
          }
        }
      },
      "SubscribersPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "SubscribersGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersListResponse_data"
          }
        }
      },
      "SubscribersPutRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "SubscribersPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "SubscribersDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "AddressListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscribersPostResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "AddressPostRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "AddressPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "AddressGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "AddressPutRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "AddressPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "AddressDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "CollectionsListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscribersPostResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "CollectionsPostRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "CollectionsPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "CollectionsGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "CollectionsPutRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "CollectionsPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "CollectionsDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "BocsListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscribersPostResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "BocsPostRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "BocsPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "BocsGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "BocsPutRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "BocsPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "BocsDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "ProductsListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscribersPostResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "ProductsPostRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "ProductsPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "ProductsGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "ProductsPutRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "ProductsPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "ProductsDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "CategoriesListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscribersPostResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "CategoriesPostRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "CategoriesPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "CategoriesGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "CategoriesPutRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "CategoriesPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "CategoriesDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "TagsListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscribersPostResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "TagsPostRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "TagsPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "TagsGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "TagsPutRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "TagsPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "TagsDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "OrdersListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrdersListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "OrdersPostRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "OrdersPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/OrdersPostResponse_data"
          }
        }
      },
      "OrdersGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "OrdersPutRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "OrdersPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "OrdersDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "SubscriptionsListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscribersPostResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "SubscriptionsPostRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "SubscriptionsPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "SubscriptionsGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "SubscriptionsPutRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "SubscriptionsPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "SubscriptionsDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "ShippingZonesListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscribersPostResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "ShippingZonesPostRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "ShippingZonesPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "ShippingZonesGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "ShippingZonesPutRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "ShippingZonesPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "ShippingZonesDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "TaxRatesListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscribersPostResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "TaxRatesPostRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "TaxRatesPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "TaxRatesGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "TaxRatesPutRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          }
        }
      },
      "TaxRatesPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "TaxRatesDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "WidgetsListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscribersPostResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "WidgetsGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "ContactsListResponse_data" : {
        "type" : "object",
        "properties" : {
          "contactId" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "email" : {
            "type" : "string",
            "example" : "earl+irwin@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Earl"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Irwin"
          },
          "createdAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "SubscribersListResponse_billingAddress" : {
        "type" : "object",
        "properties" : {
          "address1" : {
            "type" : "string",
            "example" : "Urban Homes"
          },
          "address2" : {
            "type" : "string",
            "example" : "Phase 2 Building"
          },
          "city" : {
            "type" : "string",
            "example" : "Victoria"
          },
          "state" : {
            "type" : "string",
            "example" : "Victoria"
          },
          "country" : {
            "type" : "string",
            "example" : "AU"
          },
          "postcode" : {
            "type" : "string",
            "example" : "6000"
          }
        }
      },
      "SubscribersListResponse_data" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "subscriberId" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "email" : {
            "type" : "string",
            "example" : "ear+irwin@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Earl"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Irwin"
          },
          "gender" : {
            "type" : "string",
            "example" : "male"
          },
          "company" : {
            "type" : "string",
            "example" : "Qualia Wine Services"
          },
          "phone" : {
            "type" : "string",
            "example" : "619125324436"
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/SubscribersListResponse_billingAddress"
          },
          "shippingAddress" : {
            "$ref" : "#/components/schemas/SubscribersListResponse_billingAddress"
          },
          "status" : {
            "type" : "string",
            "example" : "active"
          },
          "createdAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "SubscribersPostResponse_data" : {
        "type" : "object",
        "properties" : {
          "contactId" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "email" : {
            "type" : "string",
            "example" : "foo@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          },
          "createdAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "OrdersListResponse_customer" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Foo"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bar"
          },
          "email" : {
            "type" : "string",
            "example" : "foo@example.com"
          }
        }
      },
      "OrdersListResponse_refunds" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "reason" : {
            "type" : "string",
            "example" : "Foo Bar"
          },
          "total" : {
            "type" : "number",
            "example" : 100
          },
          "createdAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "OrdersListResponse_data" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "orderId" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "isSubscription" : {
            "type" : "boolean",
            "example" : false
          },
          "total" : {
            "type" : "number",
            "example" : 100
          },
          "discount" : {
            "type" : "number",
            "example" : 3
          },
          "shippingRate" : {
            "type" : "number",
            "example" : 2
          },
          "currency" : {
            "type" : "string",
            "example" : "AUD"
          },
          "status" : {
            "type" : "string",
            "example" : "active"
          },
          "paymentDate" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "isPaid" : {
            "type" : "boolean",
            "example" : false
          },
          "platform" : {
            "type" : "string",
            "example" : "woocommerce"
          },
          "customer" : {
            "$ref" : "#/components/schemas/OrdersListResponse_customer"
          },
          "refunds" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrdersListResponse_refunds"
            }
          },
          "createdAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "OrdersPostResponse_data" : {
        "type" : "object",
        "properties" : {
          "total" : {
            "type" : "string"
          },
          "discount" : {
            "type" : "number"
          },
          "shippingRate" : {
            "type" : "number"
          },
          "currency" : {
            "type" : "string",
            "example" : "Bar"
          },
          "status" : {
            "type" : "string"
          },
          "paymentDate" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      }
    },
    "responses" : {
      "400" : {
        "description" : "Bad request",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 400,
              "message" : "Field is required"
            }
          }
        }
      },
      "401" : {
        "description" : "Unauthorized",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 401,
              "message" : "Unauthorized"
            }
          }
        }
      },
      "403" : {
        "description" : "Forbidden",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 403,
              "message" : "Forbidden"
            }
          }
        }
      },
      "404" : {
        "description" : "Not found",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 404,
              "message" : "Not found"
            }
          }
        }
      },
      "500" : {
        "description" : "Internal server error",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 500,
              "message" : "Internal server error"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "api_key" : {
        "type" : "apiKey",
        "name" : "api_key",
        "in" : "header"
      },
      "basic_auth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  },
  "x-tagGroups" : [ {
    "name" : "People",
    "tags" : [ "Contacts", "Subscribers", "Address" ]
  }, {
    "name" : "Bocs",
    "tags" : [ "Collections", "Bocs" ]
  }, {
    "name" : "Products",
    "tags" : [ "Products", "Categories", "Tags" ]
  }, {
    "name" : "Sales",
    "tags" : [ "Orders", "Subscriptions" ]
  }, {
    "name" : "Shipping & Tax",
    "tags" : [ "Shipping Zones", "Tax Rates" ]
  }, {
    "name" : "Widgets",
    "tags" : [ "Widgets" ]
  } ]
}