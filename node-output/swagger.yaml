{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Bocs API",
    "description" : "This is an **example** API to demonstrate features of the OpenAPI specification.\n\n# Introduction\n\nThis API definition is intended to to be a good starting point for\ndescribing your API in \n\n[OpenAPI/Swagger\nformat](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).\n\nIt also demonstrates features of the\n[create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool\nand \n\nthe [Redoc](https://github.com/Redocly/Redoc) documentation engine. Beyond\nthe standard OpenAPI syntax, we use a few \n\n[vendor\nextensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n\n# OpenAPI Specification\n\nThe goal of The OpenAPI Specification is to define a standard,\nlanguage-agnostic interface to REST APIs which\n\nallows both humans and computers to discover and understand the capabilities\nof the service without access to source\n\ncode, documentation, or through network traffic inspection. When properly\ndefined via OpenAPI, a consumer can \n\nunderstand and interact with the remote service with a minimal amount of\nimplementation logic. Similar to what\n\ninterfaces have done for lower-level programming, OpenAPI removes the\nguesswork in calling the service.\n",
    "termsOfService" : "https://api.bocs.io/terms/",
    "contact" : {
      "url" : "https://bocs.io/contact",
      "email" : "contact@bocs.io"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "1.0.0",
    "x-logo" : {
      "url" : "https://git.bocs.io/bocs.png"
    }
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/MyPik-App/bocs/1.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://api.bocs.io/test",
    "description" : "Test server"
  } ],
  "paths" : {
    "/contacts" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "List Contacts",
        "description" : "Returns a list of contacts",
        "operationId" : "ListContacts",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:foo,lastName:bar"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "MTUzNzRkMmUtMDZhYS00NTgyLWIyYzgtOTk0N2I0NjU4MDJh"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort contacts",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "descending",
            "default" : "descending"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/contacts' \\\n| jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Create Contact",
        "description" : "Create properties of a contact",
        "operationId" : "PostContact",
        "requestBody" : {
          "description" : "Parameters for creating a contact",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactsPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/contacts' \\\n--data '{}' \\\n| jq\n"
        } ]
      }
    },
    "/contacts/{id}" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Get Contact",
        "description" : "Returns details about a contact",
        "operationId" : "GetContact",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the contact",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/contacts/<contact ID>' \\\n| jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Contacts" ],
        "summary" : "Update Contact",
        "description" : "Update properties for a contact",
        "operationId" : "PutContact",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the contact",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for updating a contact",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactsPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/contacts/<contact ID>' \\\n--data '' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Contacts" ],
        "summary" : "Delete Contact",
        "description" : "Deletes a specified contact",
        "operationId" : "DeleteContact",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the contact",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/contacts/<contact ID>' \\\n| jq\n"
        } ]
      }
    },
    "/subscribers" : {
      "get" : {
        "tags" : [ "Subscribers" ],
        "summary" : "List Subscribers",
        "description" : "Returns a list of subscribers",
        "operationId" : "ListSubscribers",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscribersListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscribers' \\\n| jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Subscribers" ],
        "summary" : "Create Subscriber",
        "description" : "Create properties of a subscriber",
        "operationId" : "PostSubscriber",
        "requestBody" : {
          "description" : "Parameters for creating a subscriber",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscribersPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscribersPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscribers' \\\n--data '{}' \\\n| jq\n"
        } ]
      }
    },
    "/subscribers/{id}" : {
      "get" : {
        "tags" : [ "Subscribers" ],
        "summary" : "Get Subscriber",
        "description" : "Returns details about a subscriber",
        "operationId" : "GetSubscriber",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the subscriber",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscribersGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscribers/<subscriber ID>' \\\n| jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Subscribers" ],
        "summary" : "Update Subscriber",
        "description" : "Update details of a subscriber",
        "operationId" : "PutSubscriber",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the subscriber",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for updating a subscriber",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscribersPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscribersPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscribers/<subscriber ID>' \\\n--data '' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Subscribers" ],
        "summary" : "Delete Subscriber",
        "description" : "Deletes a specified subscriber",
        "operationId" : "DeleteSubscriber",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the subscriber",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscribersDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscribers/<subscriber ID>' \\\n| jq\n"
        } ]
      }
    },
    "/address" : {
      "get" : {
        "tags" : [ "Address" ],
        "summary" : "List Address",
        "description" : "Returns a list of address",
        "operationId" : "ListAddress",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "city:\"foo\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/address' \\\n| jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Address" ],
        "summary" : "Create Address",
        "description" : "Create properties of an address",
        "operationId" : "PostAddress",
        "requestBody" : {
          "description" : "Parameters for creating an address",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddressPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/address' \\\n--data '{}' \\\n| jq\n"
        } ]
      }
    },
    "/address/{id}" : {
      "get" : {
        "tags" : [ "Address" ],
        "summary" : "Get Address",
        "description" : "Returns details about an address",
        "operationId" : "GetAddress",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/address/<address ID>' \\\n| jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Address" ],
        "summary" : "Update Address",
        "description" : "Update properties for an address",
        "operationId" : "PutAddress",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for updating an address",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddressPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/address/<address ID>' \\\n--data '' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Address" ],
        "summary" : "Delete Address",
        "description" : "Deletes a specified address",
        "operationId" : "DeleteAddress",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/address/<address ID>' \\\n| jq\n"
        } ]
      }
    },
    "/collections" : {
      "get" : {
        "tags" : [ "Collections" ],
        "summary" : "List Collections",
        "description" : "Returns list of collections",
        "operationId" : "ListCollections",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "name:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionsListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/collections' | jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Collections" ],
        "summary" : "Create Collection",
        "description" : "Create properties of a collection",
        "operationId" : "PostCollection",
        "requestBody" : {
          "description" : "Parameters for creating a collection",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CollectionsPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionsPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/collections' \\\n--data '{}' \\\n| jq\n"
        } ]
      }
    },
    "/collections/{id}" : {
      "get" : {
        "tags" : [ "Collections" ],
        "summary" : "Get Collection",
        "description" : "Returns details about a collection",
        "operationId" : "GetCollection",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the collection",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionsGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/collections/<collection ID>' \\\n| jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Collections" ],
        "summary" : "Update Collection",
        "description" : "Update properties of a collection",
        "operationId" : "PutCollection",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the collection",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for updating collection",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CollectionsPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionsPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/collections/<collection ID>' \\\n--data '' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Collections" ],
        "summary" : "Delete Collection",
        "description" : "Deletes a specified collection",
        "operationId" : "DeleteCollection",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the collection",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionsDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/collections/<collection ID>' \\\n| jq\n"
        } ]
      }
    },
    "/bocs" : {
      "get" : {
        "tags" : [ "Bocs" ],
        "summary" : "List Bocs",
        "description" : "Returns list of bocs",
        "operationId" : "ListBocs",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "name:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BocsListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/bocs' \\\n| jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Bocs" ],
        "summary" : "Create Bocs",
        "description" : "Create properties of a bocs",
        "operationId" : "PostBocs",
        "requestBody" : {
          "description" : "Parameters for creating a bocs",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BocsPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BocsPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/bocs' \\\n--data '{}' \\\n| jq\n"
        } ]
      }
    },
    "/bocs/{id}" : {
      "get" : {
        "tags" : [ "Bocs" ],
        "summary" : "Get Bocs",
        "description" : "Returns details about a bocs",
        "operationId" : "GetBocs",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the bocs",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BocsGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/bocs/<bocs ID>' \\\n| jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Bocs" ],
        "summary" : "Update Bocs",
        "description" : "Update properties of a bocs",
        "operationId" : "PutBocs",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the bocs",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for creating a bocs",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BocsPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BocsPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/bocs/<bocs ID>' \\\n--data '' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Bocs" ],
        "summary" : "Delete Bocs",
        "description" : "Deletes a specified bocs",
        "operationId" : "DeleteBocs",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the bocs",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BocsDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/bocs/<bocs ID>' \\\n| jq\n"
        } ]
      }
    },
    "/products" : {
      "get" : {
        "tags" : [ "Products" ],
        "summary" : "List Products",
        "description" : "List of products",
        "operationId" : "ListProducts",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "name:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductsListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/products' \\\n| jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Products" ],
        "summary" : "Create Product",
        "description" : "Create properties of a product",
        "operationId" : "PostProduct",
        "requestBody" : {
          "description" : "Parameters for creating a product",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductsPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductsPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/products' \\\n--data '{}' \\\n| jq\n"
        } ]
      }
    },
    "/products/{id}" : {
      "get" : {
        "tags" : [ "Products" ],
        "summary" : "Get Product",
        "description" : "Returns details about a product",
        "operationId" : "GetProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the product",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductsGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/products/<product ID>' \\\n| jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Products" ],
        "summary" : "Update Product",
        "description" : "Update properties of a product",
        "operationId" : "PutProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the product",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for updating a product",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductsPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductsPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/products/<product ID>' \\\n--data '' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Products" ],
        "summary" : "Delete Product",
        "description" : "Deletes a specified product",
        "operationId" : "DeleteProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the product",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductsDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/products/<product ID>' \\\n| jq\n"
        } ]
      }
    },
    "/categories" : {
      "get" : {
        "tags" : [ "Categories" ],
        "summary" : "List Categories",
        "description" : "List of categories",
        "operationId" : "ListCategories",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "name:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CategoriesListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/categories' \\\n| jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Categories" ],
        "summary" : "Create Category",
        "description" : "Create properties of category",
        "operationId" : "PostCategory",
        "requestBody" : {
          "description" : "Parameters for creating a category",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CategoriesPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CategoriesPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/categories' \\\n--data '{}' \\\n| jq\n"
        } ]
      }
    },
    "/categories/{id}" : {
      "get" : {
        "tags" : [ "Categories" ],
        "summary" : "Get Category",
        "description" : "Returns details about a category",
        "operationId" : "GetCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the category",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CategoriesGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/categories/<category ID>' \\\n| jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Categories" ],
        "summary" : "Update Category",
        "description" : "Update properties of a category",
        "operationId" : "PutCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the category",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for updating a category",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CategoriesPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CategoriesPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/categories/<category ID>' \\\n--data '' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Categories" ],
        "summary" : "Delete Category",
        "description" : "Deletes a specified category",
        "operationId" : "DeleteCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the category",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CategoriesDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/categories/<category ID>' \\\n| jq\n"
        } ]
      }
    },
    "/tags" : {
      "get" : {
        "tags" : [ "Tags" ],
        "summary" : "List Tags",
        "description" : "List of tags",
        "operationId" : "ListTags",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "name:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagsListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tags' \\\n| jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Tags" ],
        "summary" : "Create Tag",
        "description" : "Create properties of a tag",
        "operationId" : "PostTag",
        "requestBody" : {
          "description" : "Parameters for creating a category",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TagsPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagsPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tags' \\\n--data '{}' \\\n| jq\n"
        } ]
      }
    },
    "/tags/{id}" : {
      "get" : {
        "tags" : [ "Tags" ],
        "summary" : "Get Tag",
        "description" : "Returns details about a tag",
        "operationId" : "GetTag",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagsGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tags/<tag ID>' \\\n| jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Tags" ],
        "summary" : "Update Tag",
        "description" : "Update properties of a tag",
        "operationId" : "PutTag",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for updating a tag",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TagsPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagsPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tags/<tag ID>' \\\n--data '' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Tags" ],
        "summary" : "Delete Tag",
        "description" : "Deletes a specified category",
        "operationId" : "DeleteTag",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagsDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tags/<tag ID>' \\\n| jq\n"
        } ]
      }
    },
    "/orders" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "List Orders",
        "description" : "List of orders",
        "operationId" : "ListOrders",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "customer:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrdersListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/orders' \\\n| jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Create Order",
        "description" : "Creates properties of an order",
        "operationId" : "PostOrder",
        "requestBody" : {
          "description" : "Parameters for creating an order",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrdersPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrdersPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/orders' \\\n--data '{}' \\\n| jq\n"
        } ]
      }
    },
    "/orders/{id}" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "Get Order",
        "description" : "Returns details about an order",
        "operationId" : "GetOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the order",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrdersGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/orders/<order ID>' \\\n| jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Orders" ],
        "summary" : "Update Order",
        "description" : "Update properties of an order",
        "operationId" : "PutOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the order",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for updating an order",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrdersPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrdersPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/orders/<order ID>' \\\n--data '' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Orders" ],
        "summary" : "Delete Order",
        "description" : "Deletes a specified order",
        "operationId" : "DeleteOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the order",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrdersDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/orders/<order ID>' \\\n| jq\n"
        } ]
      }
    },
    "/subscriptions" : {
      "get" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "List Subscriptions",
        "description" : "List of subscriptions",
        "operationId" : "ListSubscriptions",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "name:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscriptions' \\\n| jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "Create Subscription",
        "description" : "Create properties of a subscription",
        "operationId" : "PostSubscription",
        "requestBody" : {
          "description" : "Parameters for creating a subscription",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionsPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscriptions' \\\n--data '{}' \\\n| jq\n"
        } ]
      }
    },
    "/subscriptions/{id}" : {
      "get" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "Get Subscription",
        "description" : "Returns details about a subscription",
        "operationId" : "GetSubscription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the subscription",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscriptions/<subscription ID>' \\\n| jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "Update Subscription",
        "description" : "Update properties of a subscription",
        "operationId" : "PutSubscription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the subscription",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for updating a subscription",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionsPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscriptions/<subscription ID>' \\\n--data '' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "Delete Subscription",
        "description" : "Deletes a specified subscription",
        "operationId" : "DeleteSubscription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the subscription",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/subscriptions/<subscription ID>' \\\n| jq\n"
        } ]
      }
    },
    "/shipping-zones" : {
      "get" : {
        "tags" : [ "Shipping Zones" ],
        "summary" : "List Shipping Zones",
        "description" : "List of shipping zones",
        "operationId" : "ListShippingZones",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "title:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ShippingZonesListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/shipping-zones' | jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Shipping Zones" ],
        "summary" : "CreateShipping Zone",
        "description" : "Create properties of a shipping zone",
        "operationId" : "PostShippingZone",
        "requestBody" : {
          "description" : "Parameters for creating a shipping zone",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ShippingZonesPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ShippingZonesPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/shipping-zones' \\\n--data '{}' \\\n| jq\n"
        } ]
      }
    },
    "/shipping-zones/{id}" : {
      "get" : {
        "tags" : [ "Shipping Zones" ],
        "summary" : "Get Shipping Zone",
        "description" : "Returns details about a shipping zone",
        "operationId" : "GetShippingZone",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the shipping zone",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ShippingZonesGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/shipping-zones/<shipping zone ID>' | jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Shipping Zones" ],
        "summary" : "Update Shipping Zone",
        "description" : "Update properties of a shipping zone",
        "operationId" : "PutShippingZone",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the shipping zone",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for updating shipping zone",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ShippingZonesPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ShippingZonesPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/shipping-zones/<shipping zone ID>' \\\n--data '' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Shipping Zones" ],
        "summary" : "Delete Shipping Zone",
        "description" : "Deletes a specified shipping zone",
        "operationId" : "DeleteShippingZone",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the shipping zone",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ShippingZonesDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/shipping-zones/<shipping zone ID>' | jq\n"
        } ]
      }
    },
    "/tax-rates" : {
      "get" : {
        "tags" : [ "Tax Rates" ],
        "summary" : "List Tax Rates",
        "description" : "List of tax rates",
        "operationId" : "ListTaxRates",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxRatesListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tax-rates' \\\n| jq\n"
        } ]
      },
      "post" : {
        "tags" : [ "Tax Rates" ],
        "summary" : "Create Tax Rate",
        "description" : "Create properties of tax rates",
        "operationId" : "PostTaxRate",
        "requestBody" : {
          "description" : "Parameters for creating a tax rate",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxRatesPostRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxRatesPostResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request POST \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tax-rates' \\\n--data '{}' \\\n| jq\n"
        } ]
      }
    },
    "/tax-rates/{id}" : {
      "get" : {
        "tags" : [ "Tax Rates" ],
        "summary" : "Get Tax Rate",
        "description" : "Returns details about a tax rate",
        "operationId" : "GetTaxRate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the tax rate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxRatesGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tax-rates/<tax-rate ID>' \\\n| jq\n"
        } ]
      },
      "put" : {
        "tags" : [ "Tax Rates" ],
        "summary" : "Update Tax Rate",
        "description" : "Update properties of tax rate",
        "operationId" : "PutTaxRate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the tax rate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for updating a tax rate",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxRatesPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxRatesPutResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request PUT \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tax-rates/<tax-rate ID>' \\\n--data '' \\\n| jq\n"
        } ]
      },
      "delete" : {
        "tags" : [ "Tax Rates" ],
        "summary" : "Delete Tax Rate",
        "description" : "Deletes a specified tax rate",
        "operationId" : "DeleteTaxRate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the tax rate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxRatesDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 400,
                  "message" : "Field is required"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request DELETE \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/tax-rates/<tax-rate ID>' \\\n| jq\n"
        } ]
      }
    },
    "/widgets" : {
      "get" : {
        "tags" : [ "Widgets" ],
        "summary" : "List Widgets",
        "description" : "List of widgets",
        "operationId" : "ListWidgets",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Filter returned rows",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "firstName:\"bar\""
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The pagination page limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "25",
            "default" : "25"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The pagination page token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WidgetsListResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/widgets' \\\n| jq\n"
        } ]
      }
    },
    "/widgets/{id}" : {
      "get" : {
        "tags" : [ "Widgets" ],
        "summary" : "Get Widget",
        "description" : "Returns details about a widget",
        "operationId" : "GetWidget",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the widget",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WidgetsGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 401,
                  "message" : "Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 403,
                  "message" : "Forbidden"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 404,
                  "message" : "Not found"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                },
                "example" : {
                  "code" : 500,
                  "message" : "Internal server error"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-codeSamples" : [ {
          "label" : "CLI",
          "lang" : "cURL",
          "source" : "curl --request GET \\\n--header 'Authorization: <your API Key>' \\\n--header 'Content-Type: application/json' \\\n--url 'https://api.bocs.io/test/widgets/<widget ID>' \\\n| jq\n"
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "ContactsListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "description" : "Response data",
            "items" : {
              "$ref" : "#/components/schemas/ContactsListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "description" : "Next page link",
            "example" : "https://api.bocs.io/dev/contacts?pageToken=c70e668c"
          }
        }
      },
      "Error" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "ContactsPostRequest" : {
        "required" : [ "email" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Email of the contact",
            "example" : "earl+irwin@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of the contact",
            "example" : "Earl"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of the contact",
            "example" : "Irwin"
          },
          "role" : {
            "type" : "string",
            "description" : "Role of the contact",
            "example" : "customer"
          },
          "groups" : {
            "type" : "array",
            "description" : "Groups of the contact",
            "example" : [ "group-1", "group-2" ],
            "items" : {
              "type" : "string"
            }
          },
          "metaData" : {
            "type" : "array",
            "description" : "Meta data of the contact",
            "items" : {
              "$ref" : "#/components/schemas/ContactsListResponse_metaData"
            }
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number of the contact",
            "example" : "123456789"
          },
          "source" : {
            "type" : "string",
            "description" : "Source of the contact",
            "example" : "woocommerce"
          },
          "sourceId" : {
            "type" : "string",
            "description" : "Source id of the contact",
            "example" : "1"
          },
          "tags" : {
            "type" : "array",
            "description" : "Tags of the contact",
            "example" : [ "tags-1", "tags-2" ],
            "items" : {
              "type" : "string"
            }
          },
          "username" : {
            "type" : "string",
            "description" : "Username of the contact",
            "example" : "xyz123"
          },
          "verifiedEmail" : {
            "type" : "boolean",
            "description" : "Determines if the contact email was verified",
            "example" : false
          },
          "dateCreated" : {
            "type" : "string",
            "description" : "Created date of the contact",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "dateCreatedGMT" : {
            "type" : "string",
            "description" : "Created date of the contact in GMT",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "dateModified" : {
            "type" : "string",
            "description" : "Modified date of the contact",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "dateModifiedGMT" : {
            "type" : "string",
            "description" : "Modified date of the contact in GMT",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "billing" : {
            "$ref" : "#/components/schemas/ContactsListResponse_billing"
          },
          "shipping" : {
            "$ref" : "#/components/schemas/ContactsListResponse_shipping"
          }
        }
      },
      "ContactsPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ContactsPostResponse_data"
          }
        }
      },
      "ContactsGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ContactsPostResponse_data"
          }
        }
      },
      "ContactsPutRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Email of the contact",
            "example" : "earl+irwin@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of the contact",
            "example" : "Earl"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of the contact",
            "example" : "Irwin"
          },
          "role" : {
            "type" : "string",
            "description" : "Role of the contact",
            "example" : "customer"
          },
          "groups" : {
            "type" : "array",
            "description" : "Groups of the contact",
            "example" : [ "group-1", "group-2" ],
            "items" : {
              "type" : "string"
            }
          },
          "metaData" : {
            "type" : "array",
            "description" : "Meta data of the contact",
            "items" : {
              "$ref" : "#/components/schemas/ContactsListResponse_metaData"
            }
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number of the contact",
            "example" : "123456789"
          },
          "source" : {
            "type" : "string",
            "description" : "Source of the contact",
            "example" : "woocommerce"
          },
          "sourceId" : {
            "type" : "string",
            "description" : "Source id of the contact",
            "example" : "1"
          },
          "tags" : {
            "type" : "array",
            "description" : "Tags of the contact",
            "example" : [ "tags-1", "tags-2" ],
            "items" : {
              "type" : "string"
            }
          },
          "username" : {
            "type" : "string",
            "description" : "Username of the contact",
            "example" : "xyz123"
          },
          "verifiedEmail" : {
            "type" : "boolean",
            "description" : "Determines if the contact email was verified",
            "example" : false
          },
          "dateCreated" : {
            "type" : "string",
            "description" : "Created date of the contact",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "dateCreatedGMT" : {
            "type" : "string",
            "description" : "Created date of the contact in GMT",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "dateModified" : {
            "type" : "string",
            "description" : "Modified date of the contact",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "dateModifiedGMT" : {
            "type" : "string",
            "description" : "Modified date of the contact in GMT",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "billing" : {
            "$ref" : "#/components/schemas/ContactsListResponse_billing"
          },
          "shipping" : {
            "$ref" : "#/components/schemas/ContactsListResponse_shipping"
          }
        }
      },
      "ContactsPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ContactsPostResponse_data"
          }
        }
      },
      "ContactsDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          }
        }
      },
      "SubscribersListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "description" : "Response data",
            "items" : {
              "$ref" : "#/components/schemas/SubscribersListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "description" : "Next page link",
            "example" : "https://api.bocs.io/dev/subscribers?pageToken=c70e668c"
          }
        }
      },
      "SubscribersPostRequest" : {
        "required" : [ "company", "email" ],
        "type" : "object",
        "properties" : {
          "company" : {
            "type" : "string",
            "description" : "Company of the subscriber",
            "example" : "Qualia Wine Services"
          },
          "email" : {
            "type" : "string",
            "description" : "Email of the subscriber",
            "example" : "ear+irwin@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of the subscriber",
            "example" : "Earl"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of the subscriber",
            "example" : "Irwin"
          },
          "gender" : {
            "type" : "string",
            "description" : "Gender of the subscriber",
            "example" : "male",
            "enum" : [ "male", "female" ]
          },
          "phone" : {
            "type" : "string",
            "description" : "Phone of the subscriber",
            "example" : "619125324436"
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/SubscribersListResponse_billingAddress"
          },
          "shippingAddress" : {
            "$ref" : "#/components/schemas/SubscribersListResponse_shippingAddress"
          }
        }
      },
      "SubscribersPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "SubscribersGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "SubscribersPutRequest" : {
        "type" : "object",
        "properties" : {
          "company" : {
            "type" : "string",
            "description" : "Company of the subscriber",
            "example" : "Qualia Wine Services"
          },
          "email" : {
            "type" : "string",
            "description" : "Email of the subscriber",
            "example" : "ear+irwin@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of the subscriber",
            "example" : "Earl"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of the subscriber",
            "example" : "Irwin"
          },
          "gender" : {
            "type" : "string",
            "description" : "Gender of the subscriber",
            "example" : "male",
            "enum" : [ "male", "female" ]
          },
          "phone" : {
            "type" : "string",
            "description" : "Phone of the subscriber",
            "example" : "619125324436"
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/SubscribersListResponse_billingAddress"
          },
          "shippingAddress" : {
            "$ref" : "#/components/schemas/SubscribersListResponse_shippingAddress"
          }
        }
      },
      "SubscribersPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscribersPostResponse_data"
          }
        }
      },
      "SubscribersDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          }
        }
      },
      "AddressListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "description" : "Response data",
            "items" : {
              "$ref" : "#/components/schemas/AddressListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "description" : "Next page link",
            "example" : "https://api.bocs.io/dev/address?pageToken=c70e668c"
          }
        }
      },
      "AddressPostRequest" : {
        "required" : [ "address1", "city", "country", "postcode", "state" ],
        "type" : "object",
        "properties" : {
          "address1" : {
            "type" : "string",
            "description" : "Address line 1 of the address",
            "example" : "Urban Homes"
          },
          "address2" : {
            "type" : "string",
            "description" : "Address line 2 of the address",
            "example" : "Phase 2 Building"
          },
          "city" : {
            "type" : "string",
            "description" : "City of the address",
            "example" : "Adelaide"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the address",
            "example" : "South Australia"
          },
          "country" : {
            "type" : "string",
            "description" : "Country of the address",
            "example" : "AU"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Post code of the address",
            "example" : "6000"
          }
        }
      },
      "AddressPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/AddressPostResponse_data"
          }
        }
      },
      "AddressGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/AddressPostResponse_data"
          }
        }
      },
      "AddressPutRequest" : {
        "type" : "object",
        "properties" : {
          "address1" : {
            "type" : "string",
            "description" : "Address line 1 of the address",
            "example" : "Urban Homes"
          },
          "address2" : {
            "type" : "string",
            "description" : "Address line 2 of the address",
            "example" : "Phase 2 Building"
          },
          "city" : {
            "type" : "string",
            "description" : "City of the address",
            "example" : "Adelaide"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the address",
            "example" : "South Australia"
          },
          "country" : {
            "type" : "string",
            "description" : "Country of the address",
            "example" : "AU"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Post code of the address",
            "example" : "6000"
          }
        }
      },
      "AddressPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/AddressPostResponse_data"
          }
        }
      },
      "AddressDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          }
        }
      },
      "CollectionsListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "description" : "Response data",
            "items" : {
              "$ref" : "#/components/schemas/CollectionsListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "description" : "Next page link",
            "example" : "https://api.bocs.io/dev/collections?pageToken=c70e668c"
          }
        }
      },
      "CollectionsPostRequest" : {
        "required" : [ "boxes", "collectionType", "name" ],
        "type" : "object",
        "properties" : {
          "collectionType" : {
            "type" : "string",
            "description" : "Type of the collection",
            "example" : "fixed"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the collection",
            "example" : "My Collection"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the collection",
            "example" : "My description of collection"
          },
          "images" : {
            "type" : "array",
            "description" : "Images of the collection",
            "items" : {
              "$ref" : "#/components/schemas/CollectionsListResponse_images"
            }
          },
          "boxes" : {
            "type" : "array",
            "description" : "Boxes of the collection",
            "items" : {
              "$ref" : "#/components/schemas/CollectionsPostRequest_boxes"
            }
          }
        }
      },
      "CollectionsPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/CollectionsPostResponse_data"
          }
        }
      },
      "CollectionsGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/CollectionsPostResponse_data"
          }
        }
      },
      "CollectionsPutRequest" : {
        "type" : "object",
        "properties" : {
          "collectionType" : {
            "type" : "string",
            "description" : "Type of the collection",
            "example" : "fixed"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the collection",
            "example" : "My Collection"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the collection",
            "example" : "My description of collection"
          },
          "images" : {
            "type" : "array",
            "description" : "Images of the collection",
            "items" : {
              "$ref" : "#/components/schemas/CollectionsListResponse_images"
            }
          },
          "boxes" : {
            "type" : "array",
            "description" : "Boxes of the collection",
            "items" : {
              "$ref" : "#/components/schemas/CollectionsPostRequest_boxes"
            }
          }
        }
      },
      "CollectionsPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/CollectionsPostResponse_data"
          }
        }
      },
      "CollectionsDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          }
        }
      },
      "BocsListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "description" : "Response data",
            "items" : {
              "$ref" : "#/components/schemas/BocsListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "description" : "Next page link",
            "example" : "https://api.bocs.io/dev/bocs?pageToken=c70e668c"
          }
        }
      },
      "BocsPostRequest" : {
        "required" : [ "boxPrice", "items", "name", "pricePerFrequency", "pricing", "sku", "type" ],
        "type" : "object",
        "properties" : {
          "parentId" : {
            "type" : "string",
            "description" : "Parent id of the bocs",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the bocs",
            "example" : "fixed"
          },
          "pricePerFrequency" : {
            "type" : "boolean",
            "description" : "Price per frequency of the bocs",
            "example" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the bocs",
            "example" : "My Box"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the bocs",
            "example" : "My bocs description"
          },
          "categories" : {
            "type" : "array",
            "description" : "Categories of the bocs",
            "example" : [ "test-1", "test-2" ],
            "items" : {
              "type" : "string"
            }
          },
          "sku" : {
            "type" : "string",
            "description" : "SKU of the box",
            "example" : "SKU-Test"
          },
          "boxPrice" : {
            "type" : "number",
            "description" : "Price of the box",
            "example" : 10
          },
          "images" : {
            "type" : "array",
            "description" : "Images of the bocs",
            "items" : {
              "$ref" : "#/components/schemas/BocsListResponse_images"
            }
          },
          "items" : {
            "type" : "array",
            "description" : "Items of the bocs",
            "items" : {
              "$ref" : "#/components/schemas/BocsListResponse_items"
            }
          },
          "pricing" : {
            "type" : "array",
            "description" : "Pricing of the bocs",
            "items" : {
              "$ref" : "#/components/schemas/BocsPostRequest_pricing"
            }
          }
        }
      },
      "BocsPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/BocsPostResponse_data"
          }
        }
      },
      "BocsGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/BocsPostResponse_data"
          }
        }
      },
      "BocsPutRequest" : {
        "type" : "object",
        "properties" : {
          "parentId" : {
            "type" : "string",
            "description" : "Parent id of the bocs",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the bocs",
            "example" : "fixed"
          },
          "pricePerFrequency" : {
            "type" : "boolean",
            "description" : "Price per frequency of the bocs",
            "example" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the bocs",
            "example" : "My Box"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the bocs",
            "example" : "My bocs description"
          },
          "categories" : {
            "type" : "array",
            "description" : "Categories of the bocs",
            "example" : [ "test-1", "test-2" ],
            "items" : {
              "type" : "string"
            }
          },
          "sku" : {
            "type" : "string",
            "description" : "SKU of the box",
            "example" : "SKU-Test"
          },
          "boxPrice" : {
            "type" : "number",
            "description" : "Price of the box",
            "example" : 10
          },
          "images" : {
            "type" : "array",
            "description" : "Images of the bocs",
            "items" : {
              "$ref" : "#/components/schemas/BocsListResponse_images"
            }
          },
          "items" : {
            "type" : "array",
            "description" : "Items of the bocs",
            "items" : {
              "$ref" : "#/components/schemas/BocsListResponse_items"
            }
          },
          "pricing" : {
            "type" : "array",
            "description" : "Pricing of the bocs",
            "items" : {
              "$ref" : "#/components/schemas/BocsPostRequest_pricing"
            }
          }
        }
      },
      "BocsPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/BocsPostResponse_data"
          }
        }
      },
      "BocsDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          }
        }
      },
      "ProductsListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "description" : "Response data",
            "items" : {
              "$ref" : "#/components/schemas/ProductsListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "description" : "Next page link",
            "example" : "https://api.bocs.io/dev/products?pageToken=c70e668c"
          }
        }
      },
      "ProductsPostRequest" : {
        "required" : [ "description", "name", "price" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the product",
            "example" : "Product-1"
          },
          "price" : {
            "type" : "number",
            "description" : "Price of the product",
            "example" : 100
          },
          "source" : {
            "type" : "string",
            "description" : "Source of the product",
            "example" : "woocommerce"
          },
          "externalProductId" : {
            "type" : "string",
            "description" : "External product id of the product",
            "example" : "1"
          },
          "categories" : {
            "type" : "array",
            "description" : "Categories of the product",
            "example" : [ "test-1", "test-2" ],
            "items" : {
              "type" : "string"
            }
          },
          "images" : {
            "type" : "array",
            "description" : "Images of the product",
            "items" : {
              "$ref" : "#/components/schemas/ProductsListResponse_images"
            }
          },
          "quantity" : {
            "type" : "number",
            "description" : "Quantity of the product",
            "example" : 5
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the product",
            "example" : "Description of product-1"
          },
          "sku" : {
            "type" : "string",
            "description" : "SKU of the product",
            "example" : "SKU-Product-1"
          },
          "isVariant" : {
            "type" : "string",
            "description" : "Variant of the product",
            "example" : "test"
          },
          "color" : {
            "type" : "string",
            "description" : "Color of the product",
            "example" : "black"
          },
          "size" : {
            "type" : "string",
            "description" : "Size of the product",
            "example" : "10"
          },
          "length" : {
            "type" : "string",
            "description" : "Length of the product",
            "example" : "20cm"
          },
          "width" : {
            "type" : "string",
            "description" : "Width of the product",
            "example" : "10"
          }
        }
      },
      "ProductsPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ProductsPostResponse_data"
          }
        }
      },
      "ProductsGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ProductsPostResponse_data"
          }
        }
      },
      "ProductsPutRequest" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the product",
            "example" : "Product-1"
          },
          "price" : {
            "type" : "number",
            "description" : "Price of the product",
            "example" : 100
          },
          "source" : {
            "type" : "string",
            "description" : "Source of the product",
            "example" : "woocommerce"
          },
          "externalProductId" : {
            "type" : "string",
            "description" : "External product id of the product",
            "example" : "1"
          },
          "categories" : {
            "type" : "array",
            "description" : "Categories of the product",
            "example" : [ "test-1", "test-2" ],
            "items" : {
              "type" : "string"
            }
          },
          "images" : {
            "type" : "array",
            "description" : "Images of the product",
            "items" : {
              "$ref" : "#/components/schemas/ProductsListResponse_images"
            }
          },
          "quantity" : {
            "type" : "number",
            "description" : "Quantity of the product",
            "example" : 5
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the product",
            "example" : "Description of product-1"
          },
          "sku" : {
            "type" : "string",
            "description" : "SKU of the product",
            "example" : "SKU-Product-1"
          },
          "isVariant" : {
            "type" : "string",
            "description" : "Variant of the product",
            "example" : "test"
          },
          "color" : {
            "type" : "string",
            "description" : "Color of the product",
            "example" : "black"
          },
          "size" : {
            "type" : "string",
            "description" : "Size of the product",
            "example" : "10"
          },
          "length" : {
            "type" : "string",
            "description" : "Length of the product",
            "example" : "20cm"
          },
          "width" : {
            "type" : "string",
            "description" : "Width of the product",
            "example" : "10"
          }
        }
      },
      "ProductsPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ProductsPostResponse_data"
          }
        }
      },
      "ProductsDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          }
        }
      },
      "CategoriesListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "description" : "Response data",
            "items" : {
              "$ref" : "#/components/schemas/CategoriesListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "description" : "Next page link",
            "example" : "https://api.bocs.io/dev/categories?pageToken=c70e668c"
          }
        }
      },
      "CategoriesPostRequest" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "parentId" : {
            "type" : "string",
            "description" : "Parent id of the category",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the category",
            "example" : "Test Category"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the category",
            "example" : "Test description"
          }
        }
      },
      "CategoriesPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/CategoriesPostResponse_data"
          }
        }
      },
      "CategoriesGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/CategoriesPostResponse_data"
          }
        }
      },
      "CategoriesPutRequest" : {
        "type" : "object",
        "properties" : {
          "parentId" : {
            "type" : "string",
            "description" : "Parent id of the category",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the category",
            "example" : "Test Category"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the category",
            "example" : "Test description"
          }
        }
      },
      "CategoriesPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/CategoriesPostResponse_data"
          }
        }
      },
      "CategoriesDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          }
        }
      },
      "TagsListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "description" : "Response data",
            "items" : {
              "$ref" : "#/components/schemas/TagsListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "description" : "Next page link",
            "example" : "https://api.bocs.io/dev/tags?pageToken=c70e668c"
          }
        }
      },
      "TagsPostRequest" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the tag",
            "example" : "Test Tag"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the tag",
            "example" : "Test description"
          }
        }
      },
      "TagsPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/TagsPostResponse_data"
          }
        }
      },
      "TagsGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/TagsPostResponse_data"
          }
        }
      },
      "TagsPutRequest" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the tag",
            "example" : "Test Tag"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the tag",
            "example" : "Test description"
          }
        }
      },
      "TagsPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/TagsPostResponse_data"
          }
        }
      },
      "TagsDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          }
        }
      },
      "OrdersListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "description" : "Response data",
            "items" : {
              "$ref" : "#/components/schemas/OrdersListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "description" : "Next page link",
            "example" : "https://api.bocs.io/dev/orders?pageToken=c70e668c"
          }
        }
      },
      "OrdersPostRequest" : {
        "required" : [ "customer", "paymentDate", "total" ],
        "type" : "object",
        "properties" : {
          "isSubscription" : {
            "type" : "boolean",
            "description" : "Determines if order is from subscription",
            "example" : false
          },
          "total" : {
            "type" : "number",
            "description" : "Total of the order",
            "example" : 100
          },
          "discount" : {
            "type" : "number",
            "description" : "Discount of the order",
            "example" : 1
          },
          "shippingRate" : {
            "type" : "number",
            "description" : "Shipping rate of the order",
            "example" : 2
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency of the order",
            "example" : "AUD"
          },
          "paymentDate" : {
            "type" : "string",
            "description" : "Payment date of the order",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "isPaid" : {
            "type" : "boolean",
            "description" : "Determines if order has been paid",
            "example" : false
          },
          "platform" : {
            "type" : "string",
            "description" : "Platform of the order",
            "example" : "woocommerce"
          },
          "customer" : {
            "$ref" : "#/components/schemas/OrdersListResponse_customer"
          },
          "refunds" : {
            "$ref" : "#/components/schemas/OrdersPostRequest_refunds"
          }
        }
      },
      "OrdersPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/OrdersPostResponse_data"
          }
        }
      },
      "OrdersGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/OrdersPostResponse_data"
          }
        }
      },
      "OrdersPutRequest" : {
        "type" : "object",
        "properties" : {
          "isSubscription" : {
            "type" : "boolean",
            "description" : "Determines if order is from subscription",
            "example" : false
          },
          "total" : {
            "type" : "number",
            "description" : "Total of the order",
            "example" : 100
          },
          "discount" : {
            "type" : "number",
            "description" : "Discount of the order",
            "example" : 1
          },
          "shippingRate" : {
            "type" : "number",
            "description" : "Shipping rate of the order",
            "example" : 2
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency of the order",
            "example" : "AUD"
          },
          "paymentDate" : {
            "type" : "string",
            "description" : "Payment date of the order",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "isPaid" : {
            "type" : "boolean",
            "description" : "Determines if order has been paid",
            "example" : false
          },
          "platform" : {
            "type" : "string",
            "description" : "Platform of the order",
            "example" : "woocommerce"
          },
          "customer" : {
            "$ref" : "#/components/schemas/OrdersListResponse_customer"
          },
          "refunds" : {
            "$ref" : "#/components/schemas/OrdersPostRequest_refunds"
          }
        }
      },
      "OrdersPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/OrdersPostResponse_data"
          }
        }
      },
      "OrdersDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          }
        }
      },
      "SubscriptionsListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "description" : "Response data",
            "items" : {
              "$ref" : "#/components/schemas/SubscriptionsListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "description" : "Next page link",
            "example" : "https://api.bocs.io/dev/subscriptions?pageToken=c70e668c"
          }
        }
      },
      "SubscriptionsPostRequest" : {
        "required" : [ "boxId", "settingsId", "shippingId", "subscriptionItems", "taxRateId" ],
        "type" : "object",
        "properties" : {
          "subscriberId" : {
            "type" : "string",
            "description" : "Subscriber id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "boxId" : {
            "type" : "string",
            "description" : "Box id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "settingsId" : {
            "type" : "string",
            "description" : "Settings id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "shippingId" : {
            "type" : "string",
            "description" : "Shipping id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "taxRateId" : {
            "type" : "string",
            "description" : "Tax rate id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the subscription",
            "example" : "Subscription 1"
          },
          "boxName" : {
            "type" : "string",
            "description" : "Box name of the subscription",
            "example" : "Test box"
          },
          "billingPeriod" : {
            "type" : "string",
            "description" : "Box name of the subscription",
            "example" : "days"
          },
          "billingInterval" : {
            "type" : "number",
            "description" : "Billing interval of the subscription",
            "example" : 7
          },
          "cancelledDate" : {
            "type" : "string",
            "description" : "Cancelled date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "discountTax" : {
            "type" : "number",
            "description" : "Discount tax of the subscription",
            "example" : 0
          },
          "discountTotal" : {
            "type" : "number",
            "description" : "Discount total of the subscription",
            "example" : 0
          },
          "endDate" : {
            "type" : "string",
            "description" : "End date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "nextPaymentDate" : {
            "type" : "string",
            "description" : "Next payment date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "shippingTax" : {
            "type" : "number",
            "description" : "Shipping tax of the subscription",
            "example" : 0
          },
          "startDate" : {
            "type" : "string",
            "description" : "Start date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "total" : {
            "type" : "number",
            "description" : "Total of the subscription",
            "example" : 100
          },
          "totalTax" : {
            "type" : "number",
            "description" : "Total tax of the subscription",
            "example" : 0
          },
          "shippingTotal" : {
            "type" : "number",
            "description" : "Total shipping of the subscription",
            "example" : 0
          },
          "subscriptionItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscriptionsPostRequest_subscriptionItems"
            }
          }
        }
      },
      "SubscriptionsPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscriptionsPostResponse_data"
          }
        }
      },
      "SubscriptionsGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscriptionsPostResponse_data"
          }
        }
      },
      "SubscriptionsPutRequest" : {
        "type" : "object",
        "properties" : {
          "subscriberId" : {
            "type" : "string",
            "description" : "Subscriber id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "boxId" : {
            "type" : "string",
            "description" : "Box id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "settingsId" : {
            "type" : "string",
            "description" : "Settings id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "shippingId" : {
            "type" : "string",
            "description" : "Shipping id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "taxRateId" : {
            "type" : "string",
            "description" : "Tax rate id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the subscription",
            "example" : "Subscription 1"
          },
          "boxName" : {
            "type" : "string",
            "description" : "Box name of the subscription",
            "example" : "Test box"
          },
          "billingPeriod" : {
            "type" : "string",
            "description" : "Box name of the subscription",
            "example" : "days"
          },
          "billingInterval" : {
            "type" : "number",
            "description" : "Billing interval of the subscription",
            "example" : 7
          },
          "cancelledDate" : {
            "type" : "string",
            "description" : "Cancelled date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "discountTax" : {
            "type" : "number",
            "description" : "Discount tax of the subscription",
            "example" : 0
          },
          "discountTotal" : {
            "type" : "number",
            "description" : "Discount total of the subscription",
            "example" : 0
          },
          "endDate" : {
            "type" : "string",
            "description" : "End date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "nextPaymentDate" : {
            "type" : "string",
            "description" : "Next payment date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "shippingTax" : {
            "type" : "number",
            "description" : "Shipping tax of the subscription",
            "example" : 0
          },
          "startDate" : {
            "type" : "string",
            "description" : "Start date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "total" : {
            "type" : "number",
            "description" : "Total of the subscription",
            "example" : 100
          },
          "totalTax" : {
            "type" : "number",
            "description" : "Total tax of the subscription",
            "example" : 0
          },
          "shippingTotal" : {
            "type" : "number",
            "description" : "Total shipping of the subscription",
            "example" : 0
          },
          "subscriptionItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscriptionsPostRequest_subscriptionItems"
            }
          }
        }
      },
      "SubscriptionsPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/SubscriptionsPostResponse_data"
          }
        }
      },
      "SubscriptionsDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "ShippingZonesListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "description" : "Response data",
            "items" : {
              "$ref" : "#/components/schemas/ShippingZonesListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "description" : "Next page link",
            "example" : "https://api.bocs.io/dev/shipping-zones?pageToken=c70e668c"
          }
        }
      },
      "ShippingZonesPostRequest" : {
        "required" : [ "city", "cost", "country", "postcode", "state", "title" ],
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "Title of the shipping zone",
            "example" : "Test Title"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the shipping zone",
            "example" : "Test Description"
          },
          "country" : {
            "type" : "string",
            "description" : "Country of the shipping zone",
            "example" : "AU"
          },
          "city" : {
            "type" : "string",
            "description" : "City of the shipping zone",
            "example" : "Adelaide"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the shipping zone",
            "example" : "South Australia"
          },
          "postcode" : {
            "type" : "number",
            "description" : "Postcode of the shipping zone",
            "example" : 6000
          },
          "cost" : {
            "type" : "number",
            "description" : "Cost of the shipping zone",
            "example" : 15
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Determines if the shipping zone is enabled",
            "example" : true
          },
          "order" : {
            "type" : "number",
            "description" : "Order of the shipping zone",
            "example" : 1
          }
        }
      },
      "ShippingZonesPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ShippingZonesPostResponse_data"
          }
        }
      },
      "ShippingZonesGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ShippingZonesPostResponse_data"
          }
        }
      },
      "ShippingZonesPutRequest" : {
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "Title of the shipping zone",
            "example" : "Test Title"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the shipping zone",
            "example" : "Test Description"
          },
          "country" : {
            "type" : "string",
            "description" : "Country of the shipping zone",
            "example" : "AU"
          },
          "city" : {
            "type" : "string",
            "description" : "City of the shipping zone",
            "example" : "Adelaide"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the shipping zone",
            "example" : "South Australia"
          },
          "postcode" : {
            "type" : "number",
            "description" : "Postcode of the shipping zone",
            "example" : 6000
          },
          "cost" : {
            "type" : "number",
            "description" : "Cost of the shipping zone",
            "example" : 15
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Determines if the shipping zone is enabled",
            "example" : true
          },
          "order" : {
            "type" : "number",
            "description" : "Order of the shipping zone",
            "example" : 1
          }
        }
      },
      "ShippingZonesPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/ShippingZonesPostResponse_data"
          }
        }
      },
      "ShippingZonesDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          }
        }
      },
      "TaxRatesListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "description" : "Response data",
            "items" : {
              "$ref" : "#/components/schemas/TaxRatesListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "description" : "Next page link",
            "example" : "https://api.bocs.io/dev/tax-rates?pageToken=c70e668c"
          }
        }
      },
      "TaxRatesPostRequest" : {
        "required" : [ "class", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the tax rate",
            "example" : "Test name"
          },
          "class" : {
            "type" : "string",
            "description" : "Class of the tax rate",
            "example" : "Test"
          },
          "country" : {
            "type" : "string",
            "description" : "Country of the tax rate",
            "example" : "AU"
          },
          "city" : {
            "type" : "string",
            "description" : "City of the tax rate",
            "example" : "Adelaide"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the tax rate",
            "example" : "South Australia"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Post code of the tax rate",
            "example" : "6000"
          },
          "rate" : {
            "type" : "number",
            "description" : "Rate of the tax rate",
            "example" : 10
          },
          "shipping" : {
            "type" : "boolean",
            "description" : "Determines if the tax rate is shipping",
            "example" : true
          },
          "priority" : {
            "type" : "number",
            "description" : "Priority of the tax rate",
            "example" : 1
          },
          "order" : {
            "type" : "number",
            "description" : "Order of the tax rate",
            "example" : 1
          },
          "compound" : {
            "type" : "string",
            "description" : "Determines if tax rate is compound",
            "example" : "boolean"
          }
        }
      },
      "TaxRatesPostResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 201
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/TaxRatesPostResponse_data"
          }
        }
      },
      "TaxRatesGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/TaxRatesPostResponse_data"
          }
        }
      },
      "TaxRatesPutRequest" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the tax rate",
            "example" : "Test name"
          },
          "class" : {
            "type" : "string",
            "description" : "Class of the tax rate",
            "example" : "Test"
          },
          "country" : {
            "type" : "string",
            "description" : "Country of the tax rate",
            "example" : "AU"
          },
          "city" : {
            "type" : "string",
            "description" : "City of the tax rate",
            "example" : "Adelaide"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the tax rate",
            "example" : "South Australia"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Post code of the tax rate",
            "example" : "6000"
          },
          "rate" : {
            "type" : "number",
            "description" : "Rate of the tax rate",
            "example" : 10
          },
          "shipping" : {
            "type" : "boolean",
            "description" : "Determines if the tax rate is shipping",
            "example" : true
          },
          "priority" : {
            "type" : "number",
            "description" : "Priority of the tax rate",
            "example" : 1
          },
          "order" : {
            "type" : "number",
            "description" : "Order of the tax rate",
            "example" : 1
          },
          "compound" : {
            "type" : "string",
            "description" : "Determines if tax rate is compound",
            "example" : "boolean"
          }
        }
      },
      "TaxRatesPutResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/TaxRatesPostResponse_data"
          }
        }
      },
      "TaxRatesDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          }
        }
      },
      "WidgetsListResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "type" : "array",
            "description" : "Response data",
            "items" : {
              "$ref" : "#/components/schemas/CollectionsListResponse_data"
            }
          },
          "nextPageLink" : {
            "type" : "string",
            "description" : "Next page link",
            "example" : "https://api.bocs.io/dev/widgets?pageToken=c70e668c"
          }
        }
      },
      "WidgetsGetResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Status code",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "description" : "Success or error message",
            "example" : "success"
          },
          "data" : {
            "$ref" : "#/components/schemas/CollectionsPostResponse_data"
          }
        }
      },
      "ContactsListResponse_metaData" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id of the meta data",
            "example" : "1"
          },
          "key" : {
            "type" : "string",
            "description" : "Key of the meta data",
            "example" : "test"
          },
          "value" : {
            "type" : "string",
            "description" : "Value of the metadata",
            "example" : "test-value"
          }
        }
      },
      "ContactsListResponse_billing" : {
        "type" : "object",
        "properties" : {
          "firstName" : {
            "type" : "string",
            "description" : "First name of the contact address",
            "example" : "Earl"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of the contact address",
            "example" : "Irwin"
          },
          "company" : {
            "type" : "string",
            "description" : "Company of the contact addres",
            "example" : "XYZ Company"
          },
          "address1" : {
            "type" : "string",
            "description" : "Address line 1 of the contact address",
            "example" : "Urban Homes"
          },
          "address2" : {
            "type" : "string",
            "description" : "Address line 2 of the contact address",
            "example" : "Phase 2 Building"
          },
          "city" : {
            "type" : "string",
            "description" : "City of the contact address",
            "example" : "Adelaide"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the contact address",
            "example" : "South Australia"
          },
          "country" : {
            "type" : "string",
            "description" : "Country of the contact address",
            "example" : "AU"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Post code of the contact address",
            "example" : "6000"
          },
          "phone" : {
            "type" : "string",
            "description" : "Post code of the contact address",
            "example" : "12345678"
          },
          "email" : {
            "type" : "string",
            "description" : "Post code of the contact address",
            "example" : "earl+irwin@bocs.io"
          },
          "default" : {
            "type" : "boolean",
            "description" : "Determines if this is the default address",
            "example" : true
          }
        },
        "description" : "Billing address of the contact"
      },
      "ContactsListResponse_shipping" : {
        "type" : "object",
        "properties" : {
          "firstName" : {
            "type" : "string",
            "description" : "First name of the contact address",
            "example" : "Earl"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of the contact address",
            "example" : "Irwin"
          },
          "company" : {
            "type" : "string",
            "description" : "Company of the contact addres",
            "example" : "XYZ Company"
          },
          "address1" : {
            "type" : "string",
            "description" : "Address line 1 of the contact address",
            "example" : "Urban Homes"
          },
          "address2" : {
            "type" : "string",
            "description" : "Address line 2 of the contact address",
            "example" : "Phase 2 Building"
          },
          "city" : {
            "type" : "string",
            "description" : "City of the contact address",
            "example" : "Adelaide"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the contact address",
            "example" : "South Australia"
          },
          "country" : {
            "type" : "string",
            "description" : "Country of the contact address",
            "example" : "AU"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Post code of the contact address",
            "example" : "6000"
          },
          "phone" : {
            "type" : "string",
            "description" : "Post code of the contact address",
            "example" : "12345678"
          },
          "email" : {
            "type" : "string",
            "description" : "Post code of the contact address",
            "example" : "earl+irwin@bocs.io"
          },
          "default" : {
            "type" : "boolean",
            "description" : "Determines if this is the default address",
            "example" : true
          }
        },
        "description" : "Shipping address of the contact"
      },
      "ContactsListResponse_data" : {
        "type" : "object",
        "properties" : {
          "contactId" : {
            "type" : "string",
            "description" : "Contact Id",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "email" : {
            "type" : "string",
            "description" : "Email of the contact",
            "example" : "earl+irwin@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of the contact",
            "example" : "Earl"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of the contact",
            "example" : "Irwin"
          },
          "role" : {
            "type" : "string",
            "description" : "Role of the contact",
            "example" : "customer"
          },
          "groups" : {
            "type" : "array",
            "description" : "Groups of the contact",
            "example" : [ "group-1", "group-2" ],
            "items" : {
              "type" : "string"
            }
          },
          "metaData" : {
            "type" : "array",
            "description" : "Meta data of the contact",
            "items" : {
              "$ref" : "#/components/schemas/ContactsListResponse_metaData"
            }
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number of the contact",
            "example" : "123456789"
          },
          "source" : {
            "type" : "string",
            "description" : "Source of the contact",
            "example" : "woocommerce"
          },
          "sourceId" : {
            "type" : "string",
            "description" : "Source id of the contact",
            "example" : "1"
          },
          "tags" : {
            "type" : "array",
            "description" : "Tags of the contact",
            "example" : [ "tags-1", "tags-2" ],
            "items" : {
              "type" : "string"
            }
          },
          "username" : {
            "type" : "string",
            "description" : "Username of the contact",
            "example" : "xyz123"
          },
          "verifiedEmail" : {
            "type" : "boolean",
            "description" : "Determines if the contact email was verified",
            "example" : false
          },
          "dateCreated" : {
            "type" : "string",
            "description" : "Created date of the contact",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "dateCreatedGMT" : {
            "type" : "string",
            "description" : "Created date of the contact in GMT",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "dateModified" : {
            "type" : "string",
            "description" : "Modified date of the contact",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "dateModifiedGMT" : {
            "type" : "string",
            "description" : "Modified date of the contact in GMT",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "billing" : {
            "$ref" : "#/components/schemas/ContactsListResponse_billing"
          },
          "shipping" : {
            "$ref" : "#/components/schemas/ContactsListResponse_shipping"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the contact",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the contact",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "ContactsPostResponse_data" : {
        "type" : "object",
        "properties" : {
          "contactId" : {
            "type" : "string",
            "description" : "Contact Id",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "email" : {
            "type" : "string",
            "description" : "Email of the contact",
            "example" : "earl+irwin@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of the contact",
            "example" : "Earl"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of the contact",
            "example" : "Irwin"
          },
          "role" : {
            "type" : "string",
            "description" : "Role of the contact",
            "example" : "customer"
          },
          "groups" : {
            "type" : "array",
            "description" : "Groups of the contact",
            "example" : [ "group-1", "group-2" ],
            "items" : {
              "type" : "string"
            }
          },
          "metaData" : {
            "type" : "array",
            "description" : "Meta data of the contact",
            "items" : {
              "$ref" : "#/components/schemas/ContactsListResponse_metaData"
            }
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number of the contact",
            "example" : "123456789"
          },
          "source" : {
            "type" : "string",
            "description" : "Source of the contact",
            "example" : "woocommerce"
          },
          "sourceId" : {
            "type" : "string",
            "description" : "Source id of the contact",
            "example" : "1"
          },
          "tags" : {
            "type" : "array",
            "description" : "Tags of the contact",
            "example" : [ "tags-1", "tags-2" ],
            "items" : {
              "type" : "string"
            }
          },
          "username" : {
            "type" : "string",
            "description" : "Username of the contact",
            "example" : "xyz123"
          },
          "verifiedEmail" : {
            "type" : "boolean",
            "description" : "Determines if the contact email was verified",
            "example" : false
          },
          "dateCreated" : {
            "type" : "string",
            "description" : "Created date of the contact",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "dateCreatedGMT" : {
            "type" : "string",
            "description" : "Created date of the contact in GMT",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "dateModified" : {
            "type" : "string",
            "description" : "Modified date of the contact",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "dateModifiedGMT" : {
            "type" : "string",
            "description" : "Modified date of the contact in GMT",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "billing" : {
            "$ref" : "#/components/schemas/ContactsListResponse_billing"
          },
          "shipping" : {
            "$ref" : "#/components/schemas/ContactsListResponse_shipping"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the contact",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the contact",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        },
        "description" : "Response data"
      },
      "SubscribersListResponse_billingAddress" : {
        "type" : "object",
        "properties" : {
          "address1" : {
            "type" : "string",
            "description" : "Billing address line 1 of the subscriber",
            "example" : "Urban Homes"
          },
          "address2" : {
            "type" : "string",
            "description" : "Billing address line 2 of the subscriber",
            "example" : "Phase 2 Building"
          },
          "city" : {
            "type" : "string",
            "description" : "Billing city of the subscriber",
            "example" : "Adelaide"
          },
          "state" : {
            "type" : "string",
            "description" : "Billing state of the subscriber",
            "example" : "South Australia"
          },
          "country" : {
            "type" : "string",
            "description" : "Billing country of the subscriber",
            "example" : "AU"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Billing post code of the subscriber",
            "example" : "6000"
          }
        },
        "description" : "Billing address of the subscriber"
      },
      "SubscribersListResponse_shippingAddress" : {
        "type" : "object",
        "properties" : {
          "address1" : {
            "type" : "string",
            "description" : "Shipping address line 1 of the subscriber",
            "example" : "Urban Homes"
          },
          "address2" : {
            "type" : "string",
            "description" : "Shipping address line 2 of the subscriber",
            "example" : "Phase 2 Building"
          },
          "city" : {
            "type" : "string",
            "description" : "Shipping city of the subscriber",
            "example" : "Adelaide"
          },
          "state" : {
            "type" : "string",
            "description" : "Shipping state of the subscriber",
            "example" : "South Australia"
          },
          "country" : {
            "type" : "string",
            "description" : "Shipping country of the subscriber",
            "example" : "AU"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Shipping post code of the subscriber",
            "example" : "6000"
          }
        },
        "description" : "Shipping address of the subscriber"
      },
      "SubscribersListResponse_data" : {
        "type" : "object",
        "properties" : {
          "subscriberId" : {
            "type" : "string",
            "description" : "Id of the subscriber",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "company" : {
            "type" : "string",
            "description" : "Company of the subscriber",
            "example" : "Qualia Wine Services"
          },
          "email" : {
            "type" : "string",
            "description" : "Email of the subscriber",
            "example" : "ear+irwin@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of the subscriber",
            "example" : "Earl"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of the subscriber",
            "example" : "Irwin"
          },
          "gender" : {
            "type" : "string",
            "description" : "Gender of the subscriber",
            "example" : "male",
            "enum" : [ "male", "female" ]
          },
          "phone" : {
            "type" : "string",
            "description" : "Phone of the subscriber",
            "example" : "619125324436"
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/SubscribersListResponse_billingAddress"
          },
          "shippingAddress" : {
            "$ref" : "#/components/schemas/SubscribersListResponse_shippingAddress"
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the subscriber",
            "example" : "active"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the subscriber",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the subscriber",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "SubscribersPostResponse_data" : {
        "type" : "object",
        "properties" : {
          "subscriberId" : {
            "type" : "string",
            "description" : "Id of the subscriber",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "company" : {
            "type" : "string",
            "description" : "Company of the subscriber",
            "example" : "Qualia Wine Services"
          },
          "email" : {
            "type" : "string",
            "description" : "Email of the subscriber",
            "example" : "ear+irwin@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of the subscriber",
            "example" : "Earl"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of the subscriber",
            "example" : "Irwin"
          },
          "gender" : {
            "type" : "string",
            "description" : "Gender of the subscriber",
            "example" : "male",
            "enum" : [ "male", "female" ]
          },
          "phone" : {
            "type" : "string",
            "description" : "Phone of the subscriber",
            "example" : "619125324436"
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/SubscribersListResponse_billingAddress"
          },
          "shippingAddress" : {
            "$ref" : "#/components/schemas/SubscribersListResponse_shippingAddress"
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the subscriber",
            "example" : "active"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the subscriber",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the subscriber",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        },
        "description" : "Response data"
      },
      "AddressListResponse_data" : {
        "type" : "object",
        "properties" : {
          "addressId" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "address1" : {
            "type" : "string",
            "description" : "Address line 1 of the address",
            "example" : "Urban Homes"
          },
          "address2" : {
            "type" : "string",
            "description" : "Address line 2 of the address",
            "example" : "Phase 2 Building"
          },
          "city" : {
            "type" : "string",
            "description" : "City of the address",
            "example" : "Adelaide"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the address",
            "example" : "South Australia"
          },
          "country" : {
            "type" : "string",
            "description" : "Country of the address",
            "example" : "AU"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Post code of the address",
            "example" : "6000"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the address",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the address",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "AddressPostResponse_data" : {
        "type" : "object",
        "properties" : {
          "addressId" : {
            "type" : "string",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "address1" : {
            "type" : "string",
            "description" : "Address line 1 of the address",
            "example" : "Urban Homes"
          },
          "address2" : {
            "type" : "string",
            "description" : "Address line 2 of the address",
            "example" : "Phase 2 Building"
          },
          "city" : {
            "type" : "string",
            "description" : "City of the address",
            "example" : "Adelaide"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the address",
            "example" : "South Australia"
          },
          "country" : {
            "type" : "string",
            "description" : "Country of the address",
            "example" : "AU"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Post code of the address",
            "example" : "6000"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the address",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the address",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        },
        "description" : "Response data"
      },
      "CollectionsListResponse_images" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "Image of the collection",
            "example" : "https://mypik-public.s3.ap-southeast-2.amazonaws.com/collections/collection-1.png"
          },
          "thumbnail" : {
            "type" : "string",
            "description" : "Image of the collection",
            "example" : "https://mypik-public.s3.ap-southeast-2.amazonaws.com/collections/collection-1.png"
          }
        }
      },
      "CollectionsListResponse_boxPricing" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id of the box pricing",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "discount" : {
            "type" : "number",
            "description" : "Discount of the box pricing",
            "example" : 0
          },
          "discountType" : {
            "type" : "string",
            "description" : "Discount type of the box pricing",
            "example" : "percentage"
          },
          "frequency" : {
            "type" : "number",
            "description" : "Frequency of the box pricing",
            "example" : 7
          },
          "sku" : {
            "type" : "string",
            "description" : "SKU of the box pricing",
            "example" : "Collection-SKU"
          },
          "timeUnit" : {
            "type" : "string",
            "description" : "Time unit of the box pricing",
            "example" : "day"
          }
        }
      },
      "CollectionsListResponse_images_1" : {
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "Image of the items under collection",
            "example" : "https://mypik-public.s3.ap-southeast-2.amazonaws.com/collections/collection-1.png"
          },
          "thumbnail" : {
            "type" : "string",
            "description" : "Image of the items under collection",
            "example" : "https://mypik-public.s3.ap-southeast-2.amazonaws.com/collections/collection-1.png"
          }
        }
      },
      "CollectionsListResponse_items" : {
        "type" : "object",
        "properties" : {
          "productId" : {
            "type" : "string",
            "description" : "Id of the item",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the item",
            "example" : "Item 1"
          },
          "price" : {
            "type" : "number",
            "description" : "Price of the item",
            "example" : 25
          },
          "quantity" : {
            "type" : "number",
            "description" : "Quantity of the item",
            "example" : 2
          },
          "images" : {
            "type" : "array",
            "description" : "Images of the items under collection",
            "items" : {
              "$ref" : "#/components/schemas/CollectionsListResponse_images_1"
            }
          }
        }
      },
      "CollectionsListResponse_images_2" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "Image of the box under collection",
            "example" : "https://mypik-public.s3.ap-southeast-2.amazonaws.com/collections/collection-1.png"
          },
          "thumbnail" : {
            "type" : "string",
            "description" : "Image of the box under collection",
            "example" : "https://mypik-public.s3.ap-southeast-2.amazonaws.com/collections/collection-1.png"
          }
        }
      },
      "CollectionsListResponse_boxes" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id of the box collection",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "collectionId" : {
            "type" : "string",
            "description" : "Id of the collection",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "boxPrice" : {
            "type" : "number",
            "description" : "Price of the box collection",
            "example" : 4
          },
          "boxDescription" : {
            "type" : "string",
            "description" : "Description of the box collection",
            "example" : "My box description"
          },
          "boxName" : {
            "type" : "string",
            "description" : "Name of the box collection",
            "example" : "My Box"
          },
          "sku" : {
            "type" : "string",
            "description" : "SKU of the box collection",
            "example" : "Test-SKU"
          },
          "boxPricing" : {
            "type" : "array",
            "description" : "Pricing of the box collection",
            "items" : {
              "$ref" : "#/components/schemas/CollectionsListResponse_boxPricing"
            }
          },
          "items" : {
            "type" : "array",
            "description" : "Items of the collection",
            "items" : {
              "$ref" : "#/components/schemas/CollectionsListResponse_items"
            }
          },
          "images" : {
            "type" : "array",
            "description" : "Images of the box under collection",
            "items" : {
              "$ref" : "#/components/schemas/CollectionsListResponse_images_2"
            }
          }
        }
      },
      "CollectionsListResponse_data" : {
        "type" : "object",
        "properties" : {
          "collectionId" : {
            "type" : "string",
            "description" : "Id of the collection",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "collectionType" : {
            "type" : "string",
            "description" : "Type of the collection",
            "example" : "fixed"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the collection",
            "example" : "My Collection"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the collection",
            "example" : "My description of collection"
          },
          "images" : {
            "type" : "array",
            "description" : "Images of the collection",
            "items" : {
              "$ref" : "#/components/schemas/CollectionsListResponse_images"
            }
          },
          "boxes" : {
            "type" : "array",
            "description" : "Boxes of the collection",
            "items" : {
              "$ref" : "#/components/schemas/CollectionsListResponse_boxes"
            }
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the collection",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the collection",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "CollectionsPostRequest_boxPricing" : {
        "type" : "object",
        "properties" : {
          "discount" : {
            "type" : "number",
            "description" : "Discount of the box pricing",
            "example" : 0
          },
          "discountType" : {
            "type" : "string",
            "description" : "Discount type of the box pricing",
            "example" : "percentage"
          },
          "frequency" : {
            "type" : "number",
            "description" : "Frequency of the box pricing",
            "example" : 7
          },
          "sku" : {
            "type" : "string",
            "description" : "SKU of the box pricing",
            "example" : "Collection-SKU"
          },
          "timeUnit" : {
            "type" : "string",
            "description" : "Time unit of the box pricing",
            "example" : "day"
          }
        }
      },
      "CollectionsPostRequest_boxes" : {
        "type" : "object",
        "properties" : {
          "boxPrice" : {
            "type" : "number",
            "description" : "Price of the box collection",
            "example" : 4
          },
          "boxDescription" : {
            "type" : "string",
            "description" : "Description of the box collection",
            "example" : "My box description"
          },
          "boxName" : {
            "type" : "string",
            "description" : "Name of the box collection",
            "example" : "My Box"
          },
          "sku" : {
            "type" : "string",
            "description" : "SKU of the box collection",
            "example" : "Test-SKU"
          },
          "boxPricing" : {
            "type" : "array",
            "description" : "Pricing of the box collection",
            "items" : {
              "$ref" : "#/components/schemas/CollectionsPostRequest_boxPricing"
            }
          },
          "items" : {
            "type" : "array",
            "description" : "Items of the collection",
            "items" : {
              "$ref" : "#/components/schemas/CollectionsListResponse_items"
            }
          },
          "images" : {
            "type" : "array",
            "description" : "Images of the box under collection",
            "items" : {
              "$ref" : "#/components/schemas/CollectionsListResponse_images_2"
            }
          }
        }
      },
      "CollectionsPostResponse_data" : {
        "type" : "object",
        "properties" : {
          "collectionId" : {
            "type" : "string",
            "description" : "Id of the collection",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "collectionType" : {
            "type" : "string",
            "description" : "Type of the collection",
            "example" : "fixed"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the collection",
            "example" : "My Collection"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the collection",
            "example" : "My description of collection"
          },
          "images" : {
            "type" : "array",
            "description" : "Images of the collection",
            "items" : {
              "$ref" : "#/components/schemas/CollectionsListResponse_images"
            }
          },
          "boxes" : {
            "type" : "array",
            "description" : "Boxes of the collection",
            "items" : {
              "$ref" : "#/components/schemas/CollectionsListResponse_boxes"
            }
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the collection",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the collection",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        },
        "description" : "Response data"
      },
      "BocsListResponse_images" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "Image of the bocs",
            "example" : "https://mypik-public.s3.ap-southeast-2.amazonaws.com/collections/collection-1.png"
          },
          "thumbnail" : {
            "type" : "string",
            "description" : "Image of the bocs",
            "example" : "https://mypik-public.s3.ap-southeast-2.amazonaws.com/collections/collection-1.png"
          }
        }
      },
      "BocsListResponse_items" : {
        "type" : "object",
        "properties" : {
          "productId" : {
            "type" : "string",
            "description" : "Id of the item",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the item",
            "example" : "Item 1"
          },
          "price" : {
            "type" : "number",
            "description" : "Price of the item",
            "example" : 25
          },
          "quantity" : {
            "type" : "number",
            "description" : "Quantity of the item",
            "example" : 2
          }
        }
      },
      "BocsListResponse_pricing" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id of the bocs pricing",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "discount" : {
            "type" : "number",
            "description" : "Discount of the bocs pricing",
            "example" : 0
          },
          "discountType" : {
            "type" : "string",
            "description" : "Discount type of the bocs pricing",
            "example" : "percentage"
          },
          "frequency" : {
            "type" : "number",
            "description" : "Frequency of the bocs pricing",
            "example" : 7
          },
          "sku" : {
            "type" : "string",
            "description" : "SKU of the bocs pricing",
            "example" : "Collection-SKU"
          },
          "timeUnit" : {
            "type" : "string",
            "description" : "Time unit of the bocs pricing",
            "example" : "day"
          }
        }
      },
      "BocsListResponse_data" : {
        "type" : "object",
        "properties" : {
          "boxId" : {
            "type" : "string",
            "description" : "Id of the bocs",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "parentId" : {
            "type" : "string",
            "description" : "Parent id of the bocs",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the bocs",
            "example" : "fixed"
          },
          "pricePerFrequency" : {
            "type" : "boolean",
            "description" : "Price per frequency of the bocs",
            "example" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the bocs",
            "example" : "My Box"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the bocs",
            "example" : "My bocs description"
          },
          "categories" : {
            "type" : "array",
            "description" : "Categories of the bocs",
            "example" : [ "test-1", "test-2" ],
            "items" : {
              "type" : "string"
            }
          },
          "sku" : {
            "type" : "string",
            "description" : "SKU of the box",
            "example" : "SKU-Test"
          },
          "boxPrice" : {
            "type" : "number",
            "description" : "Price of the box",
            "example" : 10
          },
          "images" : {
            "type" : "array",
            "description" : "Images of the bocs",
            "items" : {
              "$ref" : "#/components/schemas/BocsListResponse_images"
            }
          },
          "items" : {
            "type" : "array",
            "description" : "Items of the bocs",
            "items" : {
              "$ref" : "#/components/schemas/BocsListResponse_items"
            }
          },
          "pricing" : {
            "type" : "array",
            "description" : "Pricing of the bocs",
            "items" : {
              "$ref" : "#/components/schemas/BocsListResponse_pricing"
            }
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the bocs",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the bocs",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "BocsPostRequest_pricing" : {
        "type" : "object",
        "properties" : {
          "discount" : {
            "type" : "number",
            "description" : "Discount of the bocs pricing",
            "example" : 0
          },
          "discountType" : {
            "type" : "string",
            "description" : "Discount type of the bocs pricing",
            "example" : "percentage"
          },
          "frequency" : {
            "type" : "number",
            "description" : "Frequency of the bocs pricing",
            "example" : 7
          },
          "sku" : {
            "type" : "string",
            "description" : "SKU of the bocs pricing",
            "example" : "Collection-SKU"
          },
          "timeUnit" : {
            "type" : "string",
            "description" : "Time unit of the bocs pricing",
            "example" : "day"
          }
        }
      },
      "BocsPostResponse_data" : {
        "type" : "object",
        "properties" : {
          "boxId" : {
            "type" : "string",
            "description" : "Id of the bocs",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "parentId" : {
            "type" : "string",
            "description" : "Parent id of the bocs",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the bocs",
            "example" : "fixed"
          },
          "pricePerFrequency" : {
            "type" : "boolean",
            "description" : "Price per frequency of the bocs",
            "example" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the bocs",
            "example" : "My Box"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the bocs",
            "example" : "My bocs description"
          },
          "categories" : {
            "type" : "array",
            "description" : "Categories of the bocs",
            "example" : [ "test-1", "test-2" ],
            "items" : {
              "type" : "string"
            }
          },
          "sku" : {
            "type" : "string",
            "description" : "SKU of the box",
            "example" : "SKU-Test"
          },
          "boxPrice" : {
            "type" : "number",
            "description" : "Price of the box",
            "example" : 10
          },
          "images" : {
            "type" : "array",
            "description" : "Images of the bocs",
            "items" : {
              "$ref" : "#/components/schemas/BocsListResponse_images"
            }
          },
          "items" : {
            "type" : "array",
            "description" : "Items of the bocs",
            "items" : {
              "$ref" : "#/components/schemas/BocsListResponse_items"
            }
          },
          "pricing" : {
            "type" : "array",
            "description" : "Pricing of the bocs",
            "items" : {
              "$ref" : "#/components/schemas/BocsListResponse_pricing"
            }
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the bocs",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the bocs",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        },
        "description" : "Response data"
      },
      "ProductsListResponse_images" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "Image of the product",
            "example" : "https://mypik-public.s3.ap-southeast-2.amazonaws.com/collections/collection-1.png"
          },
          "thumbnail" : {
            "type" : "string",
            "description" : "Image of the product",
            "example" : "https://mypik-public.s3.ap-southeast-2.amazonaws.com/collections/collection-1.png"
          }
        }
      },
      "ProductsListResponse_data" : {
        "type" : "object",
        "properties" : {
          "productId" : {
            "type" : "string",
            "description" : "Id of the product",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "parentId" : {
            "type" : "string",
            "description" : "Parent id of the product",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the product",
            "example" : "Product-1"
          },
          "price" : {
            "type" : "number",
            "description" : "Price of the product",
            "example" : 100
          },
          "source" : {
            "type" : "string",
            "description" : "Source of the product",
            "example" : "woocommerce"
          },
          "externalProductId" : {
            "type" : "string",
            "description" : "External product id of the product",
            "example" : "1"
          },
          "categories" : {
            "type" : "array",
            "description" : "Categories of the product",
            "example" : [ "test-1", "test-2" ],
            "items" : {
              "type" : "string"
            }
          },
          "images" : {
            "type" : "array",
            "description" : "Images of the product",
            "items" : {
              "$ref" : "#/components/schemas/ProductsListResponse_images"
            }
          },
          "quantity" : {
            "type" : "number",
            "description" : "Quantity of the product",
            "example" : 5
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the product",
            "example" : "Description of product-1"
          },
          "sku" : {
            "type" : "string",
            "description" : "SKU of the product",
            "example" : "SKU-Product-1"
          },
          "isVariant" : {
            "type" : "string",
            "description" : "Variant of the product",
            "example" : "test"
          },
          "color" : {
            "type" : "string",
            "description" : "Color of the product",
            "example" : "black"
          },
          "size" : {
            "type" : "string",
            "description" : "Size of the product",
            "example" : "10"
          },
          "length" : {
            "type" : "string",
            "description" : "Length of the product",
            "example" : "20cm"
          },
          "width" : {
            "type" : "string",
            "description" : "Width of the product",
            "example" : "10"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the collection",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the collection",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "ProductsPostResponse_data" : {
        "type" : "object",
        "properties" : {
          "productId" : {
            "type" : "string",
            "description" : "Id of the product",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "parentId" : {
            "type" : "string",
            "description" : "Parent id of the product",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the product",
            "example" : "Product-1"
          },
          "price" : {
            "type" : "number",
            "description" : "Price of the product",
            "example" : 100
          },
          "source" : {
            "type" : "string",
            "description" : "Source of the product",
            "example" : "woocommerce"
          },
          "externalProductId" : {
            "type" : "string",
            "description" : "External product id of the product",
            "example" : "1"
          },
          "categories" : {
            "type" : "array",
            "description" : "Categories of the product",
            "example" : [ "test-1", "test-2" ],
            "items" : {
              "type" : "string"
            }
          },
          "images" : {
            "type" : "array",
            "description" : "Images of the product",
            "items" : {
              "$ref" : "#/components/schemas/ProductsListResponse_images"
            }
          },
          "quantity" : {
            "type" : "number",
            "description" : "Quantity of the product",
            "example" : 5
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the product",
            "example" : "Description of product-1"
          },
          "sku" : {
            "type" : "string",
            "description" : "SKU of the product",
            "example" : "SKU-Product-1"
          },
          "isVariant" : {
            "type" : "string",
            "description" : "Variant of the product",
            "example" : "test"
          },
          "color" : {
            "type" : "string",
            "description" : "Color of the product",
            "example" : "black"
          },
          "size" : {
            "type" : "string",
            "description" : "Size of the product",
            "example" : "10"
          },
          "length" : {
            "type" : "string",
            "description" : "Length of the product",
            "example" : "20cm"
          },
          "width" : {
            "type" : "string",
            "description" : "Width of the product",
            "example" : "10"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the collection",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the collection",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        },
        "description" : "Response data"
      },
      "CategoriesListResponse_data" : {
        "type" : "object",
        "properties" : {
          "categoryId" : {
            "type" : "string",
            "description" : "Id of the category",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "parentId" : {
            "type" : "string",
            "description" : "Parent id of the category",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the category",
            "example" : "Test Category"
          },
          "description" : {
            "type" : "string",
            "description" : "Descriptioin of the category",
            "example" : "Test description"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the category",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the category",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "CategoriesPostResponse_data" : {
        "type" : "object",
        "properties" : {
          "categoryId" : {
            "type" : "string",
            "description" : "Id of the category",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "parentId" : {
            "type" : "string",
            "description" : "Parent id of the category",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the category",
            "example" : "Test Category"
          },
          "description" : {
            "type" : "string",
            "description" : "Descriptioin of the category",
            "example" : "Test description"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the category",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the category",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        },
        "description" : "Response data"
      },
      "TagsListResponse_data" : {
        "type" : "object",
        "properties" : {
          "tagId" : {
            "type" : "string",
            "description" : "Id of the tag",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the tag",
            "example" : "Test Tag"
          },
          "description" : {
            "type" : "string",
            "description" : "Descriptioin of the tag",
            "example" : "Test description"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the tag",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the tag",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "TagsPostResponse_data" : {
        "type" : "object",
        "properties" : {
          "tagId" : {
            "type" : "string",
            "description" : "Id of the tag",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the tag",
            "example" : "Test Tag"
          },
          "description" : {
            "type" : "string",
            "description" : "Descriptioin of the tag",
            "example" : "Test description"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the tag",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the tag",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        },
        "description" : "Response data"
      },
      "OrdersListResponse_customer" : {
        "type" : "object",
        "properties" : {
          "customerId" : {
            "type" : "string",
            "description" : "Id of the customer",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "email" : {
            "type" : "string",
            "description" : "Email of the customer",
            "example" : "earl+irwin@bocs.io"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of the customer",
            "example" : "Earl"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of the customer",
            "example" : "Irwin"
          }
        },
        "description" : "Billing address of the contact"
      },
      "OrdersListResponse_refunds" : {
        "type" : "object",
        "properties" : {
          "refundId" : {
            "type" : "string",
            "description" : "Id of the refund",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "reason" : {
            "type" : "string",
            "description" : "Reason of the refund",
            "example" : "Test reason"
          },
          "total" : {
            "type" : "number",
            "description" : "Total of the refund",
            "example" : 100
          }
        },
        "description" : "Shipping address of the contact"
      },
      "OrdersListResponse_data" : {
        "type" : "object",
        "properties" : {
          "orderId" : {
            "type" : "string",
            "description" : "Contact Id",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "isSubscription" : {
            "type" : "boolean",
            "description" : "Determines if order is from subscription",
            "example" : false
          },
          "total" : {
            "type" : "number",
            "description" : "Total of the order",
            "example" : 100
          },
          "discount" : {
            "type" : "number",
            "description" : "Discount of the order",
            "example" : 1
          },
          "shippingRate" : {
            "type" : "number",
            "description" : "Shipping rate of the order",
            "example" : 2
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency of the order",
            "example" : "AUD"
          },
          "paymentDate" : {
            "type" : "string",
            "description" : "Payment date of the order",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "isPaid" : {
            "type" : "boolean",
            "description" : "Determines if order has been paid",
            "example" : false
          },
          "platform" : {
            "type" : "string",
            "description" : "Platform of the order",
            "example" : "woocommerce"
          },
          "customer" : {
            "$ref" : "#/components/schemas/OrdersListResponse_customer"
          },
          "refunds" : {
            "$ref" : "#/components/schemas/OrdersListResponse_refunds"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the contact",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the contact",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "OrdersPostRequest_refunds" : {
        "type" : "object",
        "properties" : {
          "reason" : {
            "type" : "string",
            "description" : "Reason of the refund",
            "example" : "Test reason"
          },
          "total" : {
            "type" : "number",
            "description" : "Total of the refund",
            "example" : 100
          }
        },
        "description" : "Shipping address of the contact"
      },
      "OrdersPostResponse_data" : {
        "type" : "object",
        "properties" : {
          "orderId" : {
            "type" : "string",
            "description" : "Contact Id",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "isSubscription" : {
            "type" : "boolean",
            "description" : "Determines if order is from subscription",
            "example" : false
          },
          "total" : {
            "type" : "number",
            "description" : "Total of the order",
            "example" : 100
          },
          "discount" : {
            "type" : "number",
            "description" : "Discount of the order",
            "example" : 1
          },
          "shippingRate" : {
            "type" : "number",
            "description" : "Shipping rate of the order",
            "example" : 2
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency of the order",
            "example" : "AUD"
          },
          "paymentDate" : {
            "type" : "string",
            "description" : "Payment date of the order",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "isPaid" : {
            "type" : "boolean",
            "description" : "Determines if order has been paid",
            "example" : false
          },
          "platform" : {
            "type" : "string",
            "description" : "Platform of the order",
            "example" : "woocommerce"
          },
          "customer" : {
            "$ref" : "#/components/schemas/OrdersListResponse_customer"
          },
          "refunds" : {
            "$ref" : "#/components/schemas/OrdersListResponse_refunds"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the contact",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the contact",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        },
        "description" : "Response data"
      },
      "SubscriptionsListResponse_taxes" : {
        "type" : "object",
        "properties" : {
          "taxId" : {
            "type" : "string",
            "description" : "Tax id of the tax",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "total" : {
            "type" : "number",
            "description" : "Total of the tax",
            "example" : 5
          },
          "subTotal" : {
            "type" : "number",
            "description" : "Sub total of the tax",
            "example" : 5
          }
        }
      },
      "SubscriptionsListResponse_subscriptionItems" : {
        "type" : "object",
        "properties" : {
          "subscriptionItemId" : {
            "type" : "string",
            "description" : "Id of the subscription item",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "productName" : {
            "type" : "string",
            "description" : "Product name of the subscription item",
            "example" : "Test product"
          },
          "sku" : {
            "type" : "string",
            "description" : "SKU of the subscription item",
            "example" : "SKU-Test"
          },
          "price" : {
            "type" : "number",
            "description" : "Price of the subscription item",
            "example" : 10
          },
          "quantity" : {
            "type" : "number",
            "description" : "Quantity of the subscription item",
            "example" : 10
          },
          "subTotal" : {
            "type" : "number",
            "description" : "Sub total of the subscription item",
            "example" : 100
          },
          "subTotalTax" : {
            "type" : "number",
            "description" : "Sub total tax of the subscription item",
            "example" : 0
          },
          "total" : {
            "type" : "number",
            "description" : "Total of the subscription item",
            "example" : 100
          },
          "totalTax" : {
            "type" : "number",
            "description" : "Total tax of the subscription item",
            "example" : 0
          },
          "taxes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscriptionsListResponse_taxes"
            }
          }
        },
        "description" : "Subscription items of the subscription"
      },
      "SubscriptionsListResponse_data" : {
        "type" : "object",
        "properties" : {
          "subscriptionId" : {
            "type" : "string",
            "description" : "Id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "subscriberId" : {
            "type" : "string",
            "description" : "Subscriber id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "boxId" : {
            "type" : "string",
            "description" : "Box id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "settingsId" : {
            "type" : "string",
            "description" : "Settings id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "shippingId" : {
            "type" : "string",
            "description" : "Shipping id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "taxRateId" : {
            "type" : "string",
            "description" : "Tax rate id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the subscription",
            "example" : "Subscription 1"
          },
          "boxName" : {
            "type" : "string",
            "description" : "Box name of the subscription",
            "example" : "Test box"
          },
          "billingPeriod" : {
            "type" : "string",
            "description" : "Box name of the subscription",
            "example" : "days"
          },
          "billingInterval" : {
            "type" : "number",
            "description" : "Billing interval of the subscription",
            "example" : 7
          },
          "cancelledDate" : {
            "type" : "string",
            "description" : "Cancelled date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "discountTax" : {
            "type" : "number",
            "description" : "Discount tax of the subscription",
            "example" : 0
          },
          "discountTotal" : {
            "type" : "number",
            "description" : "Discount total of the subscription",
            "example" : 0
          },
          "endDate" : {
            "type" : "string",
            "description" : "End date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "nextPaymentDate" : {
            "type" : "string",
            "description" : "Next payment date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "shippingTax" : {
            "type" : "number",
            "description" : "Shipping tax of the subscription",
            "example" : 0
          },
          "startDate" : {
            "type" : "string",
            "description" : "Start date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "total" : {
            "type" : "number",
            "description" : "Total of the subscription",
            "example" : 100
          },
          "totalTax" : {
            "type" : "number",
            "description" : "Total tax of the subscription",
            "example" : 0
          },
          "shippingTotal" : {
            "type" : "number",
            "description" : "Total shipping of the subscription",
            "example" : 0
          },
          "subscriptionItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscriptionsListResponse_subscriptionItems"
            }
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "SubscriptionsPostRequest_taxes" : {
        "type" : "object",
        "properties" : {
          "total" : {
            "type" : "number",
            "description" : "Total of the tax",
            "example" : 5
          },
          "subTotal" : {
            "type" : "number",
            "description" : "Sub total of the tax",
            "example" : 5
          }
        }
      },
      "SubscriptionsPostRequest_subscriptionItems" : {
        "type" : "object",
        "properties" : {
          "productName" : {
            "type" : "string",
            "description" : "Product name of the subscription item",
            "example" : "Test product"
          },
          "sku" : {
            "type" : "string",
            "description" : "SKU of the subscription item",
            "example" : "SKU-Test"
          },
          "price" : {
            "type" : "number",
            "description" : "Price of the subscription item",
            "example" : 10
          },
          "quantity" : {
            "type" : "number",
            "description" : "Quantity of the subscription item",
            "example" : 10
          },
          "subTotal" : {
            "type" : "number",
            "description" : "Sub total of the subscription item",
            "example" : 100
          },
          "subTotalTax" : {
            "type" : "number",
            "description" : "Sub total tax of the subscription item",
            "example" : 0
          },
          "total" : {
            "type" : "number",
            "description" : "Total of the subscription item",
            "example" : 100
          },
          "totalTax" : {
            "type" : "number",
            "description" : "Total tax of the subscription item",
            "example" : 0
          },
          "taxes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscriptionsPostRequest_taxes"
            }
          }
        },
        "description" : "Subscription items of the subscription"
      },
      "SubscriptionsPostResponse_data" : {
        "type" : "object",
        "properties" : {
          "subscriptionId" : {
            "type" : "string",
            "description" : "Id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "subscriberId" : {
            "type" : "string",
            "description" : "Subscriber id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "boxId" : {
            "type" : "string",
            "description" : "Box id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "settingsId" : {
            "type" : "string",
            "description" : "Settings id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "shippingId" : {
            "type" : "string",
            "description" : "Shipping id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "taxRateId" : {
            "type" : "string",
            "description" : "Tax rate id of the subscription",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the subscription",
            "example" : "Subscription 1"
          },
          "boxName" : {
            "type" : "string",
            "description" : "Box name of the subscription",
            "example" : "Test box"
          },
          "billingPeriod" : {
            "type" : "string",
            "description" : "Box name of the subscription",
            "example" : "days"
          },
          "billingInterval" : {
            "type" : "number",
            "description" : "Billing interval of the subscription",
            "example" : 7
          },
          "cancelledDate" : {
            "type" : "string",
            "description" : "Cancelled date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "discountTax" : {
            "type" : "number",
            "description" : "Discount tax of the subscription",
            "example" : 0
          },
          "discountTotal" : {
            "type" : "number",
            "description" : "Discount total of the subscription",
            "example" : 0
          },
          "endDate" : {
            "type" : "string",
            "description" : "End date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "nextPaymentDate" : {
            "type" : "string",
            "description" : "Next payment date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "shippingTax" : {
            "type" : "number",
            "description" : "Shipping tax of the subscription",
            "example" : 0
          },
          "startDate" : {
            "type" : "string",
            "description" : "Start date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "total" : {
            "type" : "number",
            "description" : "Total of the subscription",
            "example" : 100
          },
          "totalTax" : {
            "type" : "number",
            "description" : "Total tax of the subscription",
            "example" : 0
          },
          "shippingTotal" : {
            "type" : "number",
            "description" : "Total shipping of the subscription",
            "example" : 0
          },
          "subscriptionItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscriptionsListResponse_subscriptionItems"
            }
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        },
        "description" : "Response data"
      },
      "ShippingZonesListResponse_data" : {
        "type" : "object",
        "properties" : {
          "shippingZoneId" : {
            "type" : "string",
            "description" : "Id of the shipping zone",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "title" : {
            "type" : "string",
            "description" : "Title of the shipping zone",
            "example" : "Test Title"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the shipping zone",
            "example" : "Test Description"
          },
          "country" : {
            "type" : "string",
            "description" : "Country of the shipping zone",
            "example" : "AU"
          },
          "city" : {
            "type" : "string",
            "description" : "City of the shipping zone",
            "example" : "Adelaide"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the shipping zone",
            "example" : "South Australia"
          },
          "postcode" : {
            "type" : "number",
            "description" : "Postcode of the shipping zone",
            "example" : 6000
          },
          "cost" : {
            "type" : "number",
            "description" : "Cost of the shipping zone",
            "example" : 15
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Determines if the shipping zone is enabled",
            "example" : true
          },
          "order" : {
            "type" : "number",
            "description" : "Order of the shipping zone",
            "example" : 1
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "ShippingZonesPostResponse_data" : {
        "type" : "object",
        "properties" : {
          "shippingZoneId" : {
            "type" : "string",
            "description" : "Id of the shipping zone",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "title" : {
            "type" : "string",
            "description" : "Title of the shipping zone",
            "example" : "Test Title"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the shipping zone",
            "example" : "Test Description"
          },
          "country" : {
            "type" : "string",
            "description" : "Country of the shipping zone",
            "example" : "AU"
          },
          "city" : {
            "type" : "string",
            "description" : "City of the shipping zone",
            "example" : "Adelaide"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the shipping zone",
            "example" : "South Australia"
          },
          "postcode" : {
            "type" : "number",
            "description" : "Postcode of the shipping zone",
            "example" : 6000
          },
          "cost" : {
            "type" : "number",
            "description" : "Cost of the shipping zone",
            "example" : 15
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Determines if the shipping zone is enabled",
            "example" : true
          },
          "order" : {
            "type" : "number",
            "description" : "Order of the shipping zone",
            "example" : 1
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the subscription",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        },
        "description" : "Response data"
      },
      "TaxRatesListResponse_data" : {
        "type" : "object",
        "properties" : {
          "taxRateSettingsId" : {
            "type" : "string",
            "description" : "Id of the tax rate",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the tax rate",
            "example" : "Test name"
          },
          "class" : {
            "type" : "string",
            "description" : "Class of the tax rate",
            "example" : "Test"
          },
          "country" : {
            "type" : "string",
            "description" : "Country of the tax rate",
            "example" : "AU"
          },
          "city" : {
            "type" : "string",
            "description" : "City of the tax rate",
            "example" : "Adelaide"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the tax rate",
            "example" : "South Australia"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Post code of the tax rate",
            "example" : "6000"
          },
          "rate" : {
            "type" : "number",
            "description" : "Rate of the tax rate",
            "example" : 10
          },
          "shipping" : {
            "type" : "boolean",
            "description" : "Determines if the tax rate is shipping",
            "example" : true
          },
          "priority" : {
            "type" : "number",
            "description" : "Priority of the tax rate",
            "example" : 1
          },
          "order" : {
            "type" : "number",
            "description" : "Order of the tax rate",
            "example" : 1
          },
          "compound" : {
            "type" : "string",
            "description" : "Determines if tax rate is compound",
            "example" : "boolean"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the tax rate",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the tax rate",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        }
      },
      "TaxRatesPostResponse_data" : {
        "type" : "object",
        "properties" : {
          "taxRateSettingsId" : {
            "type" : "string",
            "description" : "Id of the tax rate",
            "example" : "20f4d56d-2b58-430b-8d51-93d2b6a53d59"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the tax rate",
            "example" : "Test name"
          },
          "class" : {
            "type" : "string",
            "description" : "Class of the tax rate",
            "example" : "Test"
          },
          "country" : {
            "type" : "string",
            "description" : "Country of the tax rate",
            "example" : "AU"
          },
          "city" : {
            "type" : "string",
            "description" : "City of the tax rate",
            "example" : "Adelaide"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the tax rate",
            "example" : "South Australia"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Post code of the tax rate",
            "example" : "6000"
          },
          "rate" : {
            "type" : "number",
            "description" : "Rate of the tax rate",
            "example" : 10
          },
          "shipping" : {
            "type" : "boolean",
            "description" : "Determines if the tax rate is shipping",
            "example" : true
          },
          "priority" : {
            "type" : "number",
            "description" : "Priority of the tax rate",
            "example" : 1
          },
          "order" : {
            "type" : "number",
            "description" : "Order of the tax rate",
            "example" : 1
          },
          "compound" : {
            "type" : "string",
            "description" : "Determines if tax rate is compound",
            "example" : "boolean"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of the tax rate",
            "example" : "2022-10-25T11:25:08.394Z"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of the tax rate",
            "example" : "2022-10-25T11:25:08.394Z"
          }
        },
        "description" : "Response data"
      }
    },
    "responses" : {
      "400" : {
        "description" : "Bad request",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 400,
              "message" : "Field is required"
            }
          }
        }
      },
      "401" : {
        "description" : "Unauthorized",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 401,
              "message" : "Unauthorized"
            }
          }
        }
      },
      "403" : {
        "description" : "Forbidden",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 403,
              "message" : "Forbidden"
            }
          }
        }
      },
      "404" : {
        "description" : "Not found",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 404,
              "message" : "Not found"
            }
          }
        }
      },
      "500" : {
        "description" : "Internal server error",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 500,
              "message" : "Internal server error"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "api_key" : {
        "type" : "apiKey",
        "name" : "Authorization",
        "in" : "header"
      }
    }
  },
  "x-tagGroups" : [ {
    "name" : "People",
    "tags" : [ "Contacts", "Subscribers", "Address" ]
  }, {
    "name" : "Bocs",
    "tags" : [ "Collections", "Bocs" ]
  }, {
    "name" : "Products",
    "tags" : [ "Products", "Categories", "Tags" ]
  }, {
    "name" : "Sales",
    "tags" : [ "Orders", "Subscriptions" ]
  }, {
    "name" : "Shipping & Tax",
    "tags" : [ "Shipping Zones", "Tax Rates" ]
  }, {
    "name" : "Widgets",
    "tags" : [ "Widgets" ]
  } ]
}